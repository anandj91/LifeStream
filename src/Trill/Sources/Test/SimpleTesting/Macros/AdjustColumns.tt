<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reactive.Linq;
using Microsoft.StreamProcessing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SimpleTesting
{
<#
foreach (var orientation in new [] { "Row", "Columnar" })
foreach (var batch in new [] { string.Empty, "SmallBatch" })
{
    var suffix = orientation + batch;
#>
    [TestClass]
    public class AdjustColumnsTests<#= suffix #> : TestWithConfigSettingsAndMemoryLeakDetection
    {
        public AdjustColumnsTests<#= suffix #>() : base(
            new ConfigModifier()
<#  switch (orientation)
    {
        case "Row": #>
            .ForceRowBasedExecution(true)
            .DontFallBackToRowBasedExecution(true)
<#          break;
        case "Columnar": #>
            .ForceRowBasedExecution(false)
            .DontFallBackToRowBasedExecution(true)
<#          break;
    } #>
<# if (!string.IsNullOrEmpty(batch)) { #>
            .DataBatchSize(100)
<# } #>
            .UseMultiString(false)
            .MultiStringTransforms(Config.CodegenOptions.MultiStringFlags.None))
        { }

        [TestMethod, TestCategory("Gated")]
        public void AdjustColumnsTrivial<#= suffix #>()
        {
            var input = WideStruct1.GetTestData()
                .ToStreamable()
                .Select(() => new WideStruct1())
                .ToAtemporalObservable()
                .ToEnumerable()
                .ToList();

            Assert.IsTrue(input.SequenceEqual(WideStruct1.GetTestData()));
        }

        [TestMethod, TestCategory("Gated")]
        public void AdjustColumnsDrop<#= suffix #>()
        {
            var input = WideStruct2.GetTestData()
                .ToStreamable()
                .Select(() => new WideStruct1())
                .ToAtemporalObservable()
                .ToEnumerable()
                .ToList();

            Assert.IsTrue(input.SequenceEqual(WideStruct1.GetTestData()));
        }

        [TestMethod, TestCategory("Gated")]
        public void AdjustColumnsAddViaFormula<#= suffix #>()
        {
            var input = WideStruct1.GetTestData()
                .ToStreamable()
                .Select(
                    () => new WideStruct2(),
                    o => o.Key2,
                    o => o.Key1 == "c" ? "e" : "d")
                .ToAtemporalObservable()
                .ToEnumerable()
                .ToList();

            Assert.IsTrue(input.SequenceEqual(WideStruct2.GetTestData()));
        }

        [TestMethod, TestCategory("Gated")]
        public void AdjustColumnsAddViaDictionary<#= suffix #>()
        {
            var input = WideStruct1.GetTestData()
                .ToStreamable()
                .Select(() => new WideStruct2(), new Dictionary<string, Expression<Func<WideStruct1, object>>>
                    {
                        { "Key2", o => (o.Key1 == "c" ? "e" : "d") }
                    })
                .ToAtemporalObservable()
                .ToEnumerable()
                .ToList();

            Assert.IsTrue(input.SequenceEqual(WideStruct2.GetTestData()));
        }
    }

<# } #>
}
