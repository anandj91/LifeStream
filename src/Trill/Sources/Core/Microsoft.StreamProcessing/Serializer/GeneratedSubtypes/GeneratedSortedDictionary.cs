// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing.Internal
{
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class GeneratedSortedDictionary : CommonBaseTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Generic;
using Microsoft.StreamProcessing;

public sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.name));
            this.Write("<TKey, TValue> : SortedDictionary<TKey, TValue>\r\n{\r\n    private static IComparer<" +
                    "TKey> comparer;\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.name));
            this.Write("() : base(comparer) { }\r\n\r\n    public static void Initialize(IComparer<TKey> inCo" +
                    "mparer) { comparer = inComparer; }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
