// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class PointAtEndTemplate : CommonUnaryTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// *********************************************************************
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Aggregates;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

[DataContract]
internal sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(" : UnaryPipe<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(">\r\n{\r\n    private readonly MemoryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> pool;\r\n    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGen" +
                    "erator;\r\n\r\n    private StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> genericOutputBatch;\r\n    [DataMember]\r\n    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(@" output;

    [DataMember]
    private long lastSyncTime = long.MinValue;
    [DataMember]
    private EndPointHeap endPointHeap = new EndPointHeap();
    [DataMember]
    private FastMap<ActiveEvent> intervalMap = new FastMap<ActiveEvent>();

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(staticCtor));
            this.Write("\r\n\r\n    [Obsolete(\"Used only by serialization. Do not call directly.\")]\r\n    publ" +
                    "ic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("() { }\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("(\r\n        IStreamable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> stream,\r\n        IStreamObserver<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> observer,\r\n        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator)\r\n" +
                    "        : base(stream, observer)\r\n    {\r\n        pool = MemoryManager.GetMemoryP" +
                    "ool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(@">(true /*stream.Properties.IsColumnar*/);
        this.queryPlanGenerator = queryPlanGenerator;
        GetOutputBatch();
    }

    private void GetOutputBatch()
    {
        pool.Get(out genericOutputBatch);
        genericOutputBatch.Allocate();
        output = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(")genericOutputBatch;\r\n");
 foreach (var f in this.fields.Where(fld => fld.OptimizeString())) {  
            this.Write("\r\n        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Initialize();\r\n");
 } 
            this.Write(@"   }

    public override void ProduceQueryPlan(PlanNode previous)
    {
        Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));
    }

    private void ReachTime(long timestamp)
    {
        long endPointTime;
        int index;
        while (endPointHeap.TryGetNextInclusive(timestamp, out endPointTime, out index))
        {
            int ind = output.Count++;
            output.vsync.col[ind] = endPointTime;
            output.vother.col[ind] = endPointTime + 1;
            var interval = intervalMap.Values[index];
            output.key.col[ind] = interval.Key;
");
     foreach (var f in this.fields) { 
       if (f.OptimizeString()) { 
            this.Write("\r\n            output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(interval.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
       } else { 
            this.Write("            output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[ind] = interval.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");
       } 
     } 
            this.Write(@"            output.hash.col[ind] = interval.Hash;

            if (output.Count == Config.DataBatchSize)
            {
                output.Seal();
                this.Observer.OnNext(output);
                GetOutputBatch();
            }

            intervalMap.Remove(index);
        }
        lastSyncTime = timestamp;
    }

    public override unsafe void OnNext(StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> genericBatch)\r\n    {\r\n        var batch = genericBatch as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(";\r\n        var count = batch.Count;\r\n\r\n        fixed (long* bv = batch.bitvector." +
                    "col)\r\n        {\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n   " +
                    "             if ((bv[i >> 6] & (1L << (i & 0x3f))) == 0)\r\n                {\r\n   " +
                    "                 if (batch.vsync.col[i] > lastSyncTime) ReachTime(batch.vsync.co" +
                    "l[i]);\r\n\r\n                    if (batch.vother.col[i] == StreamEvent.InfinitySyn" +
                    "cTime)\r\n                    {\r\n\r\n                    }\r\n                    else" +
                    " if (batch.vother.col[i] < batch.vsync.col[i])\r\n                    {\r\n         " +
                    "               int ind = output.Count++;\r\n                        output.vsync.c" +
                    "ol[ind] = batch.vsync.col[i];\r\n                        output.vother.col[ind] = " +
                    "batch.vsync.col[i] + 1;\r\n                        output.key.col[ind] = batch.key" +
                    ".col[i];\r\n                        output[ind] = batch[i];\r\n                     " +
                    "   output.hash.col[ind] = batch.hash.col[i];\r\n\r\n                        if (outp" +
                    "ut.Count == Config.DataBatchSize)\r\n                        {\r\n                  " +
                    "          output.Seal();\r\n                            this.Observer.OnNext(outpu" +
                    "t);\r\n                            GetOutputBatch();\r\n                        }\r\n " +
                    "                   }\r\n                    else\r\n                    {\r\n         " +
                    "               int index = intervalMap.Insert(batch.hash.col[i]);\r\n             " +
                    "           intervalMap.Values[index].Populate(batch.key.col[i], batch, i, batch." +
                    "hash.col[i]);\r\n                        endPointHeap.Insert(batch.vother.col[i], " +
                    "index);\r\n                    }\r\n                }\r\n                else if (batc" +
                    "h.vother.col[i] == StreamEvent.PunctuationOtherTime)\r\n                {\r\n       " +
                    "             ReachTime(batch.vsync.col[i]);\r\n\r\n                    int ind = out" +
                    "put.Count++;\r\n                    output.vsync.col[ind] = batch.vsync.col[i];\r\n " +
                    "                   output.vother.col[ind] = StreamEvent.PunctuationOtherTime;\r\n " +
                    "                   output.key.col[ind] = batch.key.col[i];\r\n                    " +
                    "output[ind] = batch[ind];\r\n                    output.hash.col[ind] = batch.hash" +
                    ".col[i];\r\n                    output.bitvector.col[ind >> 6] |= (1L << (ind & 0x" +
                    "3f));\r\n\r\n                    if (output.Count == Config.DataBatchSize) FlushCont" +
                    "ents();\r\n                }\r\n            }\r\n        }\r\n        batch.Free();\r\n   " +
                    " }\r\n\r\n    protected override void FlushContents()\r\n    {\r\n        if (this.outpu" +
                    "t.Count == 0) return;\r\n        this.Observer.OnNext(this.output);\r\n        GetOu" +
                    "tputBatch();\r\n    }\r\n\r\n    protected override void DisposeState() => this.output" +
                    ".Free();\r\n\r\n    public override int CurrentlyBufferedOutputCount => this.output." +
                    "Count;\r\n\r\n    public override int CurrentlyBufferedInputCount => this.intervalMa" +
                    "p.Count;\r\n\r\n    [DataContract]\r\n    private struct ActiveEvent\r\n    {\r\n");
 foreach (var f in this.fields) { 
            this.Write("        [DataMember]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");
 } 
            this.Write("        [DataMember]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(" Key;\r\n        [DataMember]\r\n        public int Hash;\r\n\r\n        public void Popu" +
                    "late(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(" key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(" batch, int index, int hash)\r\n        {\r\n            this.Key = key;\r\n");
 foreach (var f in this.fields) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.AccessExpressionForRowValue("batch", "index")));
            this.Write(";\r\n");
 } 
            this.Write("            this.Hash = hash;\r\n        }\r\n\r\n        public override string ToStri" +
                    "ng()\r\n        {\r\n            return \"Key=\'\" + Key + \"\', Payload=\'\"; // + Payload" +
                    ";\r\n        }\r\n    }\r\n\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
