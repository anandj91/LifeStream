<#@ template language="C#" inherits="ExtendLifetimeBaseTemplate" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Aggregates;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

[DataContract]
internal sealed class <#= className #><#= TKeyTPayloadGenericParameters #> : UnaryPipe<<#= TKey #>, <#= TPayload #>, <#= TPayload #>>
{
    private readonly MemoryPool<<#= TKey #>, <#= TPayload #>> pool;
    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator;

    [SchemaSerialization]
    private readonly long duration;

    private StreamMessage<<#= TKey #>, <#= TPayload #>> genericOutputBatch;
    [DataMember]
    private <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #> output;

    [DataMember]
    private long lastSyncTime = long.MinValue;
    [DataMember]
    private FastMap<ActiveEvent> syncTimeMap = new FastMap<ActiveEvent>();
    [DataMember]
    private EndPointHeap endPointHeap = new EndPointHeap();
    [DataMember]
    private Dictionary<long, List<ActiveEvent>> contractedToZero = new Dictionary<long, List<ActiveEvent>>();

<# if (useCompiledKeyComparer) { #>
    [SchemaSerialization]
    private readonly Expression<Func<TKey, TKey, bool>> keyComparerExpr;
    private readonly Func<TKey, TKey, bool> keyComparer;
<# } #>
<# if (useCompiledPayloadComparer) { #>
    [SchemaSerialization]
    private readonly Expression<Func<TPayload, TPayload, bool>> payloadComparerExpr;
    private readonly Func<TPayload, TPayload, bool> payloadComparer;
<# } #>

    <#= staticCtor #>

    [Obsolete("Used only by serialization. Do not call directly.")]
    public <#= className #>() { }

    public <#= className #>(
        IStreamable<<#= TKey #>, <#= TPayload #>> stream,
        IStreamObserver<<#= TKey #>, <#= TPayload #>> observer,
        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator,
        long duration)
        : base(stream, observer)
    {
        this.duration = duration;
        this.queryPlanGenerator = queryPlanGenerator;

<# if (useCompiledKeyComparer) { #>
        keyComparerExpr = stream.Properties.KeyEqualityComparer.GetEqualsExpr();
        keyComparer = keyComparerExpr.Compile();
<# } #>

<# if (useCompiledPayloadComparer) { #>
        payloadComparerExpr = stream.Properties.PayloadEqualityComparer.GetEqualsExpr();
        payloadComparer = payloadComparerExpr.Compile();
<# } #>

        pool = MemoryManager.GetMemoryPool<<#= TKey #>, <#= TPayload #>>(true /*stream.Properties.IsColumnar*/);
        GetOutputBatch();
    }

    private void GetOutputBatch()
    {
        pool.Get(out genericOutputBatch);
        genericOutputBatch.Allocate();
        output = (<#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #>)genericOutputBatch;
<# foreach (var f in this.fields.Where(fld => fld.OptimizeString())) {  #>

        output.<#= f.Name #>.Initialize();
<# } #>
   }

    public override void ProduceQueryPlan(PlanNode previous)
    {
        Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));
    }

    private void ReachTime(long timestamp)
    {
        long endPointTime;
        int index;
        while (endPointHeap.TryGetNextExclusive(timestamp, out endPointTime, out index))
        {
            List<ActiveEvent> found;
            bool sendToOutput = true;
            if (this.contractedToZero.TryGetValue(endPointTime, out found))
            {
                for (int i = 0; i < found.Count; i++)
                {
                    var activeEvent = syncTimeMap.Values[index];
                    if (activeEvent.Other != StreamEvent.InfinitySyncTime) continue;
                    var f = found[i];
                    if (<#= payloadComparer("f", "activeEvent.Payload") #>
                        && <#= keyComparer("f.Key", "activeEvent.Key") #>
                        && f.Other == activeEvent.Sync)
                    {
                        // We have a start edge that has been marked for deletion
                        found.RemoveAt(i);
                        if (found.Count == 0) this.contractedToZero.Remove(endPointTime);
                        sendToOutput = false;
                        break;
                    }
                }
            }

            if (!sendToOutput) continue;
            int ind = output.Count++;
            {
                var activeEvent = syncTimeMap.Values[index];
                output.vsync.col[ind] = activeEvent.Sync;
                output.vother.col[ind] = activeEvent.Other;
                output.key.col[ind] = activeEvent.Key;
<#     foreach (var f in this.fields) { #>
<#       if (f.OptimizeString()) { #>

                output.<#= f.Name #>.AddString(activeEvent.<#= f.Name #>);
<#       } else { #>
                output.<#= f.Name #>.col[ind] = activeEvent.<#= f.Name #>;
<#       } #>
<#     } #>
                output.hash.col[ind] = activeEvent.Hash;
            }

            if (output.Count == Config.DataBatchSize) FlushContents();
            syncTimeMap.Remove(index);
        }
        lastSyncTime = timestamp;
    }

    public override unsafe void OnNext(StreamMessage<<#= TKey #>, <#= TPayload #>> genericBatch)
    {
        var batch = genericBatch as <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #>;
        var count = batch.Count;

        fixed (long* bv = batch.bitvector.col)
        {
            for (int i = 0; i < count; i++)
            {
                if ((bv[i >> 6] & (1L << (i & 0x3f))) == 0)
                {
                    if (batch.vsync.col[i] >= StreamEvent.MinSyncTime + duration) ReachTime(batch.vsync.col[i] - duration);

                    if (batch.vother.col[i] == StreamEvent.InfinitySyncTime)
                    {
                        // For start events, we queue them up
                        // until we are [duration] time past to make sure that
                        // no end edges have been moved earlier
                        int index = syncTimeMap.Insert(batch.hash.col[i]);
                        syncTimeMap.Values[index].Populate(batch.key.col[i], batch, i, batch.vsync.col[i], StreamEvent.InfinitySyncTime, batch.hash.col[i]);
                        endPointHeap.Insert(batch.vsync.col[i], index);
                    }
                    else if (batch.vother.col[i] > batch.vsync.col[i])
                    {
                        // For intervals, we clip the duration as well before queueing
                        // Events with durations of zero or less are dropped
                        var sync = batch.vsync.col[i];
                        var other = batch.vother.col[i] - duration;
                        if (other <= sync) continue;

                        int index = syncTimeMap.Insert(batch.hash.col[i]);
                        syncTimeMap.Values[index].Populate(batch.key.col[i], batch, i, sync, other, batch.hash.col[i]);
                        endPointHeap.Insert(batch.vsync.col[i], index);
                    }
                    else
                    {
                        var sync = batch.vsync.col[i] - duration;
                        var other = batch.vother.col[i];

                        if (other >= sync)
                        {
                            // If we have a contracted event, do not add the end edge to the batch.
                            // Also, add the payload to a list of events to be purged.
                            var activeEvent = new ActiveEvent();
                            activeEvent.Populate(batch.key.col[i], batch, i, sync, other, batch.hash.col[i]);
                            this.contractedToZero.Add(other, activeEvent);
                        }
                        else
                        {
                            int ind = output.Count++;
                            output.vsync.col[ind] = sync;
                            output.vother.col[ind] = other;
                            output.key.col[ind] = batch.key.col[i];
                            output[ind] = batch[i];
                            output.hash.col[ind] = batch.hash.col[i];

                            if (output.Count == Config.DataBatchSize) FlushContents();
                        }
                    }
                }
                else if (batch.vother.col[i] == StreamEvent.PunctuationOtherTime)
                {
                    long syncTime = (batch.vsync.col[i] == StreamEvent.InfinitySyncTime ? StreamEvent.InfinitySyncTime : batch.vsync.col[i] - duration);
                    ReachTime(syncTime);

                    int ind = output.Count++;
                    output.vsync.col[ind] = syncTime;
                    output.vother.col[ind] = StreamEvent.PunctuationOtherTime;
                    output.key.col[ind] = default;
                    output[ind] = default;
                    output.hash.col[ind] = batch.hash.col[i];
                    output.bitvector.col[ind >> 6] |= (1L << (ind & 0x3f));

                    if (output.Count == Config.DataBatchSize) FlushContents();
                }
            }
        }
        batch.Free();
    }

    protected override void FlushContents()
    {
        if (output.Count == 0) return;
        output.Seal();
        this.Observer.OnNext(output);
        GetOutputBatch();
    }

    protected override void DisposeState() => output.Free();

    public override int CurrentlyBufferedOutputCount => output.Count;

    public override int CurrentlyBufferedInputCount => syncTimeMap.Count + contractedToZero.Values.Select(o => o.Count).Sum();

<# if (!noFields && !this.payloadType.GetTypeInfo().IsValueType) { #>
    [DataContract]
    private struct <#= ActiveEventType #>
    {
        <# foreach (var f in this.fields) { #>
        [DataMember]
        public <#= f.Type.GetCSharpSourceSyntax() #> <#= f.OriginalName #>;
        <# } #>
    }
<# } #>

    [DataContract]
    private struct ActiveEvent
    {
        [DataMember]
        public <#= TKey #> Key;
        [DataMember]
        public long Sync;
        [DataMember]
        public long Other;
        [DataMember]
        public int Hash;
        [DataMember]
        public <#= ActiveEventType #> Payload;

        public void Populate(<#= TKey #> key, <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #> batch, int index, long sync, long other, int hash)
        {
            this.Key = key;
<# if (this.noFields) { #>
            this.Payload = batch.payload.col[index];
<# } else { #>
<#     foreach (var f in this.fields) { #>
            this.Payload.<#= f.OriginalName #> = <#= f.AccessExpressionForRowValue("batch", "index") #>;
<# } #>
<# } #>
            this.Sync = sync;
            this.Other = other;
            this.Hash = hash;
        }

        public bool PayloadEquals(ActiveEvent other)
        {
<# foreach (var f in this.fields) { #>
            if (!this.<#= f.Name #>.Equals(other.<#= f.Name #>)) return false;
<# } #>
            return true;
        }

        public override string ToString()
        {
            return "Key='" + Key + "', Payload='"; // + Payload;
        }
    }
}
