// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class ExtendLifetimeTemplate : ExtendLifetimeBaseTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Aggregates;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

[DataContract]
internal sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(" : UnaryPipe<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(">\r\n{\r\n    private readonly MemoryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> pool;\r\n    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGen" +
                    "erator;\r\n\r\n    [SchemaSerialization]\r\n    private readonly long duration;\r\n\r\n   " +
                    " private StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> genericOutputBatch;\r\n    [DataMember]\r\n    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(@" output;

    [DataMember]
    private long lastSyncTime = long.MinValue;
    [DataMember]
    private FastMap<ActiveEvent> endPointMap = new FastMap<ActiveEvent>();
    [DataMember]
    private EndPointHeap endPointHeap = new EndPointHeap();

    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(staticCtor));
            this.Write("\r\n\r\n    [Obsolete(\"Used only by serialization. Do not call directly.\")]\r\n    publ" +
                    "ic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("() { }\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("(\r\n        IStreamable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> stream,\r\n        IStreamObserver<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(@"> observer,
        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator,
        long duration)
        : base(stream, observer)
    {
        this.duration = duration;
        this.queryPlanGenerator = queryPlanGenerator;
        pool = MemoryManager.GetMemoryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(">(true /*stream.Properties.IsColumnar*/);\r\n        GetOutputBatch();\r\n    }\r\n\r\n  " +
                    "  private void GetOutputBatch()\r\n    {\r\n        pool.Get(out genericOutputBatch)" +
                    ";\r\n        genericOutputBatch.Allocate();\r\n        output = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(")genericOutputBatch;\r\n");
 foreach (var f in this.fields.Where(fld => fld.OptimizeString())) {  
            this.Write("        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Initialize();\r\n");
 } 
            this.Write(@"   }

    public override void ProduceQueryPlan(PlanNode previous)
    {
        Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));
    }

    private void ReachTime(long timestamp)
    {
        long endPointTime;
        int index;
        while (endPointHeap.TryGetNextInclusive(timestamp, out endPointTime, out index))
        {
            int ind = output.Count++;
            output.vsync.col[ind] = endPointTime;
            var evt = endPointMap.Values[index];
            output.vother.col[ind] = evt.StartEdge;
            output.key.col[ind] = evt.Key;
");
     foreach (var f in this.fields) { 
       if (f.OptimizeString()) { 
            this.Write("            output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(evt.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
       } else { 
            this.Write("            output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[ind] = evt.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");
       } 
     } 
            this.Write(@"            output.hash.col[ind] = evt.Hash;

            if (output.Count == Config.DataBatchSize)
            {
                output.Seal();
                this.Observer.OnNext(output);
                GetOutputBatch();
            }

            endPointMap.Remove(index);
        }
        lastSyncTime = timestamp;
    }

    public override unsafe void OnNext(StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> genericBatch)\r\n    {\r\n        var batch = genericBatch as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(@";
        var count = batch.Count;

        fixed (long* bv = batch.bitvector.col)
        {
            for (int i = 0; i < count; i++)
            {
                if ((bv[i >> 6] & (1L << (i & 0x3f))) == 0)
                {
                    if (batch.vsync.col[i] > lastSyncTime) ReachTime(batch.vsync.col[i]);

                    if (batch.vother.col[i] == StreamEvent.InfinitySyncTime) // For start events, copy directly across
                    {
                        int ind = output.Count++;
                        output.vsync.col[ind] = batch.vsync.col[i];
                        output.vother.col[ind] = StreamEvent.InfinitySyncTime;
                        output.key.col[ind] = batch.key.col[i];
");
     foreach (var f in this.fields) { 
       if (f.OptimizeString()) { 
            this.Write("                        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i]);\r\n");
       } else { 
            this.Write("                        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[ind] = batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i];\r\n");
       } 
     } 
            this.Write(@"                        output.hash.col[ind] = batch.hash.col[i];

                        if (output.Count == Config.DataBatchSize)
                        {
                            output.Seal();
                            this.Observer.OnNext(output);
                            GetOutputBatch();
                        }
                    }
                    else if (batch.vother.col[i] > batch.vsync.col[i]) // For intervals, just extend the duration
                    {
                        int ind = output.Count++;
                        output.vsync.col[ind] = batch.vsync.col[i];
                        output.vother.col[ind] = batch.vother.col[i] + duration;
                        output.key.col[ind] = batch.key.col[i];
");
     foreach (var f in this.fields) { 
       if (f.OptimizeString()) { 
            this.Write("                        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i]);\r\n");
       } else { 
            this.Write("                        output.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[ind] = batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i];\r\n");
       } 
     } 
            this.Write("                        output.hash.col[ind] = batch.hash.col[i];\r\n\r\n            " +
                    "            if (output.Count == Config.DataBatchSize)\r\n                        {" +
                    "\r\n                            output.Seal();\r\n                            this.O" +
                    "bserver.OnNext(output);\r\n                            GetOutputBatch();\r\n        " +
                    "                }\r\n                    }\r\n                    else\r\n            " +
                    "        {\r\n                        int index = endPointMap.Insert(batch.hash.col" +
                    "[i]);\r\n                        endPointMap.Values[index].Populate(batch.key.col[" +
                    "i], batch, i, batch.vother.col[i], batch.hash.col[i]);\r\n                        " +
                    "endPointHeap.Insert(batch.vsync.col[i] + duration, index);\r\n                    " +
                    "}\r\n                }\r\n                else if (batch.vother.col[i] == StreamEven" +
                    "t.PunctuationOtherTime)\r\n                {\r\n                    ReachTime(batch." +
                    "vsync.col[i]);\r\n\r\n                    int ind = output.Count++;\r\n               " +
                    "     output.vsync.col[ind] = batch.vsync.col[i];\r\n                    output.vot" +
                    "her.col[ind] = StreamEvent.PunctuationOtherTime;\r\n                    output.key" +
                    ".col[ind] = default;\r\n                    output[ind] = default;\r\n              " +
                    "      output.hash.col[ind] = batch.hash.col[i];\r\n                    output.bitv" +
                    "ector.col[ind >> 6] |= (1L << (ind & 0x3f));\r\n\r\n                    if (output.C" +
                    "ount == Config.DataBatchSize) FlushContents();\r\n                }\r\n            }" +
                    "\r\n        }\r\n        batch.Free();\r\n    }\r\n\r\n    protected override void FlushCo" +
                    "ntents()\r\n    {\r\n        if (output.Count == 0) return;\r\n        this.Observer.O" +
                    "nNext(output);\r\n        GetOutputBatch();\r\n    }\r\n\r\n    protected override void " +
                    "DisposeState() => output.Free();\r\n\r\n    public override int CurrentlyBufferedOut" +
                    "putCount => output.Count;\r\n\r\n    public override int CurrentlyBufferedInputCount" +
                    " => endPointMap.Count;\r\n\r\n    [DataContract]\r\n    private struct ActiveEvent\r\n  " +
                    "  {\r\n");
 foreach (var f in this.fields) { 
            this.Write("        [DataMember]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");
 } 
            this.Write("        [DataMember]\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(" Key;\r\n        [DataMember]\r\n        public long StartEdge;\r\n        [DataMember]" +
                    "\r\n        public int Hash;\r\n\r\n        public void Populate(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(" key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(" batch, int index, long startEdge, int hash)\r\n        {\r\n            this.Key = k" +
                    "ey;\r\n");
 foreach (var f in this.fields) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.AccessExpressionForRowValue("batch", "index")));
            this.Write(";\r\n");
 } 
            this.Write("            this.StartEdge = startEdge;\r\n            this.Hash = hash;\r\n        }" +
                    "\r\n\r\n        public override string ToString()\r\n        {\r\n            return \"Ke" +
                    "y=\'\" + Key + \"\', Payload=\'\"; // + Payload;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
