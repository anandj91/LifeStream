<#@ template language="C#" inherits="AggregateTemplate" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\..\..\Aggregates\AggregateCommon.txt" #>
/// <summary>
/// Operator only has to deal with start edges
/// </summary>
[DataContract]
internal sealed class <#= className #><#= genericParameters #> : UnaryPipe<<#= TKey #>, <#= TInput #>, <#= TOutput #>>
{
    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator;
    private readonly IAggregate<<#= TInput #>, <#= TState #>, <#= TOutput #>> aggregate;
    <#= Transformer.GetMemoryPoolClassName(this.keyType, this.outputType) #><#= genericParameters2 #> pool;

    private StreamMessage<<#= TKey #>, <#= TOutput #>> genericOutputbatch;
    [DataMember]
    private <#= Transformer.GetBatchClassName(keyType, outputType) #><#= TKeyTOutputGenericParameters #> batch;

<# if (this.useCompiledInitialState) { #>
    private readonly Func<<#= TState #>> initialState;
<# } #>
<# if (this.useCompiledAccumulate) { #>
    private readonly Func<<#= TState #>, long, <#= TInput #>, <#= TState #>> accumulate;
<# } #>
<# if (this.useCompiledComputeResult) { #>
    private readonly Func<<#= TState #>, <#= TOutput #>> computeResult;
<# } #>

    private readonly IEqualityComparerExpression<<#= TKey #>> keyComparer;

<# if (!this.isUngrouped) { #>
    [DataMember]
    private FastDictionary3<<#= TKey #>, HeldStateStruct> heldAggregates;
<# } else { #>
    [DataMember]
    private HeldStateStruct currentState;
    [DataMember]
    private bool currentStateExists;
    [DataMember]
    private bool isDirty;
<# } #>

    [DataMember]
    private long lastSyncTime = long.MinValue;

    <#= staticCtor #>

    public <#= className #>() { }

    public <#= className #>(
        Streamable<<#= TKey #>, <#= TOutput #>> stream,
        IStreamObserver<<#= TKey #>, <#= TOutput #>> observer,
        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator,
        IAggregate<<#= TInput #>, <#= TState #>, <#= TOutput #>> aggregate)
        : base(stream, observer)
    {
        this.aggregate = aggregate;
        this.queryPlanGenerator = queryPlanGenerator;

<# if (this.useCompiledInitialState) { #>
        initialState = aggregate.InitialState().Compile();
<# } #>
<# if (this.useCompiledAccumulate) { #>
        accumulate = aggregate.Accumulate().Compile();
<# } #>
<# if (this.useCompiledComputeResult) { #>
        computeResult = aggregate.ComputeResult().Compile();
<# } #>

        this.keyComparer = stream.Properties.KeyEqualityComparer;

        this.pool = MemoryManager.GetMemoryPool<<#= TKey #>, <#= TOutput #>>() as <#= Transformer.GetMemoryPoolClassName(this.keyType, this.outputType) #><#= genericParameters2 #>;
        <#= getOutputBatch #>
        this.batch.Allocate();

<# if (!this.isUngrouped) { #>
        var generator = this.keyComparer.CreateFastDictionary3Generator<<#= TKey #>, HeldStateStruct>(1, this.keyComparer.GetEqualsExpr().Compile(), this.keyComparer.GetGetHashCodeExpr().Compile(), stream.Properties.QueryContainer);
        this.heldAggregates = generator.Invoke();
<# } else { #>
        isDirty = false;
<# } #>
    }

    public override void ProduceQueryPlan(PlanNode previous)
        => Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));

    protected override void FlushContents()
    {
        if (this.batch == null || this.batch.Count == 0) return;
        this.batch.Seal();
        this.Observer.OnNext(this.batch);
        <#= getOutputBatch #>
        this.batch.Allocate();
    }

    protected override void DisposeState() => this.batch.Free();

    public override int CurrentlyBufferedOutputCount => this.batch.Count;

    public override int CurrentlyBufferedInputCount => <#= this.isUngrouped ? "0" : "this.heldAggregates.Count" #>;

    public override unsafe void OnNext(StreamMessage<<#= TKey #>, <#= TInput #>> inputBatch)
    {
        <#= BatchGeneratedFrom_TKey_TInput #><#= TKeyTInputGenericParameters #> generatedBatch = inputBatch as <#= BatchGeneratedFrom_TKey_TInput #><#= TKeyTInputGenericParameters #>;

        var count = generatedBatch.Count;

<# if (this.outputFields.Count() > 1) { #>
        <#= TOutput #> temporaryOutput;
<# } #>

        // Create locals that point directly to the arrays within the columns in the input batch.
<# foreach (var f in this.inputFields) { #>
<# if (f.canBeFixed) { #>
        fixed (<#= f.TypeName #>* <#= f.Name #>_col = generatedBatch.<#= f.Name #>.col)
        {
<# } else { #>
        var <#= f.Name #>_col = generatedBatch.<#= f.Name #>.col;
<# } #>
<# } #>

        // Create locals that point directly to the arrays within the columns in the output batch.
<# foreach (var f in this.outputFields) { #>
<# if (f.canBeFixed) { #>
        fixed (<#= f.TypeName #>* dest_<#= f.Name #> = this.batch.<#= f.Name #>.col)
        {
<# } else { #>
        var dest_<#= f.Name #> = this.batch.<#= f.Name #>.col;
<# } #>
<# } #>
        var col_key = generatedBatch.key.col;

        fixed (long* col_vsync = generatedBatch.vsync.col)
        fixed (long* col_vother = generatedBatch.vother.col)
        fixed (int* col_hash = generatedBatch.hash.col)
        fixed (long* col_bv = generatedBatch.bitvector.col)
        for (int i = 0; i < count; i++)
        {
            if ((col_bv[i >> 6] & (1L << (i & 0x3f))) != 0)
            {
                if (col_vother[i] == long.MinValue)
                {
                    // We have found a row that corresponds to punctuation
                    OnPunctuation(col_vsync[i]);

                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = col_vsync[i];
                    this.batch.vother.col[c] = long.MinValue;
                    this.batch.key.col[c] = default;
                    this.batch[c] = default;
                    this.batch.hash.col[c] = 0;
                    this.batch.bitvector.col[c >> 6] |= 1L << (c & 0x3f);
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                }
                continue;
            }

            var syncTime = col_vsync[i];

            // Handle time moving forward
            if (syncTime > this.lastSyncTime)
            {
<# if (this.isUngrouped) { #>
                if (currentStateExists && isDirty)   // there exists earlier state
                {
                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = currentState.timestamp;
                    this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                    <#= assignToOutput(computeResult("currentState.state")) #>
                    this.batch.hash.col[c] = 0;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                }
                isDirty = false;
<# } else { #>
                int iter1 = FastDictionary3<<#= TKey #>, HeldStateStruct>.IteratorStart;
                while (this.heldAggregates.IterateDirty(ref iter1))
                {
                    var iter1entry = this.heldAggregates.entries[iter1];

                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = iter1entry.value.timestamp;
                    this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                    <#= assignToOutput(computeResult("iter1entry.value.state")) #>
                    this.batch.key.col[c] = iter1entry.key;
                    this.batch.hash.col[c] = iter1entry.hash;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                }

                // Time has moved forward, clean the held aggregates
                this.heldAggregates.Clean();
<# } #>

                // Since sync time changed, set this.lastSyncTime
                this.lastSyncTime = syncTime;
            }

<# if (this.isUngrouped) { #>
            if (!currentStateExists)
            {
                currentState.state = <#= initialState #>;
                currentState.timestamp = syncTime;
                currentStateExists = true;
                isDirty = true;
            }
            else
            {
                if (!isDirty)
                {
                    // Output end edge
                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = syncTime;
                    this.batch.vother.col[c] = currentState.timestamp;
                    <#= assignToOutput(computeResult("currentState.state")) #>

                    this.batch.hash.col[c] = 0;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                    currentState.timestamp = syncTime;
                    isDirty = true;
                }
            }
            currentState.state = <#= accumulate("currentState.state", "col_vsync[i]") #>;
<# } else { #>
            // Retrieve the key from the dictionary
            var currentKey = col_key[i];
            var currentHash = col_hash[i];

            int index;

            bool heldAggsLookup = false;
            {
                int num = currentHash & 0x7fffffff;
                index = num % this.heldAggregates.Size;

                do
                {
                    if ((this.heldAggregates.bitvector[index >> 3] & (0x1 << (index & 0x7))) == 0)
                    {
                        heldAggsLookup = false;
                        break;
                    }

                    if ((currentHash == this.heldAggregates.entries[index].hash) && (<#= inlinedKeyComparerEquals("currentKey", "this.heldAggregates.entries[index].key") #>))
                    {
                        heldAggsLookup = true;
                        break;
                    }

                    index++;
                    if (index == this.heldAggregates.Size)
                        index = 0;
                } while (true);
            }

            if (!heldAggsLookup)
            // if (!this.heldAggregates.Lookup(currentKey, currentHash, out index))
            {
                // New group. Create new state
                HeldStateStruct currentState;
                currentState.state = <#= initialState #>;
                currentState.timestamp = syncTime;

                // No output because initial state is empty
                this.heldAggregates.Insert(ref index, currentKey, currentState, currentHash);
            }
            else
            {
                // read new currentState from _heldAgg index
                var currentState = this.heldAggregates.entries[index].value;

                if (this.heldAggregates.IsClean(ref index))
                {
                    // Output end edge
                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = syncTime;
                    this.batch.vother.col[c] = currentState.timestamp;
                    <#= assignToOutput(computeResult("currentState.state")) #>

                    this.batch.key.col[c] = currentKey;
                    this.batch.hash.col[c] = currentHash;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                    currentState.timestamp = syncTime;
                    this.heldAggregates.SetDirty(ref index);
                }
            }
            this.heldAggregates.entries[index].value.state = <#= accumulate("this.heldAggregates.entries[index].value.state", "col_vsync[i]") #>;
<# } #>
        }

<# foreach (var f in this.inputFields.Where(fld => fld.canBeFixed)) { #>
        }
<# } #>
<# foreach (var f in this.outputFields.Where(fld => fld.canBeFixed)) { #>
        }
<# } #>

        generatedBatch.Release();
        generatedBatch.Return();
    }

    public void OnPunctuation(long syncTime)
    {
<# if (this.outputFields.Count() > 1) { #>
        <#= TOutput #> temporaryOutput;
<# foreach (var f in this.outputFields) { #>
        var dest_<#= f.Name #> = this.batch.<#= f.Name #>.col;
<# } #>
<# } #>

        // Handle time moving forward
        if (syncTime > this.lastSyncTime)
        {
<# if (this.isUngrouped) { #>
            if (currentStateExists && isDirty) // need to send start edge if state is dirty
            {
                int c = this.batch.Count;
                this.batch.vsync.col[c] = currentState.timestamp;
                this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                <#= assignToOutput(computeResult("currentState.state")) #>

                this.batch.hash.col[c] = 0;
                this.batch.Count++;
                if (this.batch.Count == Config.DataBatchSize) FlushContents();
            }
            isDirty = false;
<# } else { #>
            int iter1 = FastDictionary3<<#= TKey #>, HeldStateStruct>.IteratorStart;
            while (this.heldAggregates.IterateDirty(ref iter1))
            {
                var iter1entry = this.heldAggregates.entries[iter1];

                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = iter1entry.value.timestamp;
                    this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                    <#= assignToOutput(computeResult("iter1entry.value.state")) #>

                    this.batch.key.col[c] = iter1entry.key;
                    this.batch.hash.col[c] = iter1entry.hash;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
            }

            // Time has moved forward, clean the held aggregates
            this.heldAggregates.Clean();
<# } #>

            // Since sync time changed, set this.lastSyncTime
            this.lastSyncTime = syncTime;
        }
    }
}//
