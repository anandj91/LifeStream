<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#define PARALLELMERGE
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using Microsoft.StreamProcessing.Internal.Collections;

namespace Microsoft.StreamProcessing
{
<# for (int i = 0; i < 2; i++)
{
    var innerKey = i == 0 ? "CompoundGroupKey<TOuterKey, TInnerKey>" : "TInnerKey";
    var outerKey = i == 0 ? "TOuterKey" : "Empty";
    var nestedInfix = i == 0 ? "Nested" : string.Empty;
#>
    internal sealed class UngroupStreamable<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult> : Streamable<<#= outerKey #>, TResult>
    {
        private static readonly SafeConcurrentDictionary<Tuple<Type, string>> cachedPipes
                          = new SafeConcurrentDictionary<Tuple<Type, string>>();

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes", Justification="Used to avoid creating redundant readonly property.")]
        public readonly Expression<Func<TInnerKey, TInnerResult, TResult>> ResultSelector;
        private IStreamable<<#= innerKey #>, TInnerResult> Source;

        public UngroupStreamable(
            <#= i == 0 ? @"IEqualityComparerExpression<TOuterKey> comparer,
            " : string.Empty #>IStreamable<<#= innerKey #>, TInnerResult> source,
            Expression<Func<TInnerKey, TInnerResult, TResult>> resultSelector)
            : base(source.Properties.Ungroup(resultSelector))
        {
            Contract.Requires(source != null);
            Contract.Requires(resultSelector != null);

            this.Source = source;
            this.ResultSelector = resultSelector;
        }

        public override IDisposable Subscribe(IStreamObserver<<#= outerKey #>, TResult> observer)
        {
            if (this.Properties.IsColumnar && CanGenerateColumnar())
                return this.Source.Subscribe(GetPipe(observer));
            else
                return this.Source.Subscribe(CreatePipe(observer));
        }

        internal IStreamObserver<<#= innerKey #>, TInnerResult> CreatePipe(
            IStreamObserver<<#= outerKey #>, TResult> observer)
        {
<# if (i == 0) { #>
            if (typeof(TOuterKey).GetPartitionType() == null) return new Ungroup<#= nestedInfix #>Pipe<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>(this, observer);
            return new PartitionedUngroup<#= nestedInfix #>Pipe<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>(this, observer);
<# } else { #>
            return new Ungroup<#= nestedInfix #>Pipe<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>(this, observer);
<# } #>
        }

        private bool CanGenerateColumnar()
        {
<#  if (i == 0)
    { #>
            var typeOfTOuterKey = typeof(TOuterKey);
<#  } #>
            var typeOfTInnerKey = typeof(TInnerKey);
            var typeOfTResult = typeof(TResult);

            if (!typeOfTResult.CanRepresentAsColumnar()) return false;
<#  if (i == 0)
    { #>
            if (typeOfTOuterKey.GetPartitionType() != null) return false;
<#  } #>
            if (typeOfTInnerKey.GetPartitionType() != null) return false;

            // For now, restrict the inner key to be anything other than an anonymous type since those can't be ungrouped without using reflection.
            if (typeOfTInnerKey.IsAnonymousType()) return false;

            var lookupKey = CacheKey.Create(this.ResultSelector.ExpressionToCSharp());

            var generatedPipeType = cachedPipes.GetOrAdd(lookupKey, key => UngroupTemplate.Generate<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>(this.ResultSelector));

            this.errorMessages = generatedPipeType.Item2;
            return generatedPipeType.Item1 != null;
        }

        private IStreamObserver<<#= innerKey #>, TInnerResult> GetPipe(IStreamObserver<<#= outerKey #>, TResult> observer)
        {
            var lookupKey = CacheKey.Create(this.ResultSelector.ExpressionToCSharp());

            var generatedPipeType = cachedPipes.GetOrAdd(lookupKey, key => UngroupTemplate.Generate<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>(this.ResultSelector));
            Func<PlanNode, IQueryObject, PlanNode> planNode = ((PlanNode p, IQueryObject o) => new UngroupPlanNode(
                    p,
                    o,
                    typeof(<#= innerKey #>),
                    typeof(<#= outerKey #>),
                    typeof(TInnerResult),
                    typeof(TResult),
                    this.ResultSelector,
                    true,
                    generatedPipeType.Item2));

            var instance = Activator.CreateInstance(generatedPipeType.Item1, this, observer, planNode);
            var returnValue = (IStreamObserver<<#= innerKey #>, TInnerResult>)instance;
            return returnValue;
        }

    }

<# } #>
}