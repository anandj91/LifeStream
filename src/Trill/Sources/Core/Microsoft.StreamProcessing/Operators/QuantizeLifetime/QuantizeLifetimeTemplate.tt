<#@ template language="C#" inherits="CommonUnaryTemplate" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Aggregates;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;
[assembly: IgnoresAccessChecksTo("Microsoft.StreamProcessing")]

[DataContract]
internal sealed class <#= className #><#= TKeyTPayloadGenericParameters #> : UnaryPipe<<#= TKey #>, <#= TPayload #>, <#= TPayload #>>
{
    private readonly MemoryPool<<#= TKey #>, <#= TPayload #>> pool;
    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator;

    [SchemaSerialization]
    private readonly long width;
    [SchemaSerialization]
    private readonly long skip;
    [SchemaSerialization]
    private readonly long progress;
    [SchemaSerialization]
    private readonly long offset;

    private StreamMessage<<#= TKey #>, <#= TPayload #>> genericOutputBatch;
    [DataMember]
    private <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #> output;

    [DataMember]
    private long lastSyncTime = long.MinValue;
    [DataMember]
    private IEndPointOrderer endPointHeap = new EndPointHeap();
    [DataMember]
    private FastMap<ActiveEvent> intervalMap = new FastMap<ActiveEvent>();

    <#= staticCtor #>

    [Obsolete("Used only by serialization. Do not call directly.")]
    public <#= className #>() { }

    public <#= className #>(
        IStreamable<<#= TKey #>, <#= TPayload #>> stream,
        IStreamObserver<<#= TKey #>, <#= TPayload #>> observer, long width, long skip, long progress, long offset,
        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator)
        : base(stream, observer)
    {
        pool = MemoryManager.GetMemoryPool<<#= TKey #>, <#= TPayload #>>(true /*stream.Properties.IsColumnar*/);
        this.queryPlanGenerator = queryPlanGenerator;
        GetOutputBatch();
        this.width = width;
        this.progress = progress;
        this.skip = skip;
        this.offset = offset;
    }

    private void GetOutputBatch()
    {
        pool.Get(out genericOutputBatch);
        genericOutputBatch.Allocate();
        output = (<#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #>)genericOutputBatch;
<# foreach (var f in this.fields.Where(fld => fld.OptimizeString())) {  #>
        output.<#= f.Name #>.Initialize();
<# } #>
   }

    public override void ProduceQueryPlan(PlanNode previous)
    {
        Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));
    }

    private void ReachTime(long timestamp)
    {
        long endPointTime;
        int index;
        while (endPointHeap.TryGetNextInclusive(timestamp, out endPointTime, out index))
        {
            int ind = output.Count++;
            var interval = intervalMap.Values[index];
            output.vsync.col[ind] = endPointTime;
            output.vother.col[ind] = interval.Other;
            output.key.col[ind] = interval.Key;
<#     foreach (var f in this.fields) { #>
<#       if (f.OptimizeString()) { #>

            output.<#= f.Name #>.AddString(interval.<#= f.Name #>);
<#       } else { #>
            output.<#= f.Name #>.col[ind] = interval.<#= f.Name #>;
<#       } #>
<#     } #>
            output.hash.col[ind] = interval.Hash;

            if (output.Count == Config.DataBatchSize) FlushContents();

            intervalMap.Remove(index);
        }
        lastSyncTime = timestamp;
    }

    public override unsafe void OnNext(StreamMessage<<#= TKey #>, <#= TPayload #>> genericBatch)
    {
        var batch = genericBatch as <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #>;
        var count = batch.Count;

        fixed (long* bv = batch.bitvector.col)
        fixed (long* vsync = batch.vsync.col)
        fixed (long* vother = batch.vother.col)
        {
            for (int i = 0; i < count; i++)
            {
                if ((bv[i >> 6] & (1L << (i & 0x3f))) == 0)
                {
                    if (batch.vsync.col[i] > lastSyncTime) ReachTime(batch.vsync.col[i]);

                    if (batch.vother.col[i] == StreamEvent.InfinitySyncTime) // Start edge
                    {
                        int ind = this.output.Count++;
                        this.output.vsync.col[ind] = vsync[i] - ((vsync[i] - this.offset) % this.progress + this.progress) % this.progress;
                        this.output.vother.col[ind] = StreamEvent.InfinitySyncTime;
                        this.output.key.col[ind] = batch.key.col[i];
                        this.output[ind] = batch[i];
                        this.output.hash.col[ind] = batch.hash.col[i];
                        if (this.output.Count == Config.DataBatchSize) FlushContents();
                    }
                    else if (batch.vother.col[i] > batch.vsync.col[i]) // Interval
                    {
                        int ind = this.output.Count++;
                        this.output.vsync.col[ind] = vsync[i] - ((vsync[i] - this.offset) % this.progress + this.progress) % this.progress;
                        var temp = Math.Max(vother[i] + this.skip - 1, vsync[i] + this.width);
                        this.output.vother.col[ind] = temp - ((temp - (this.offset + this.width)) % this.skip + this.skip) % this.skip;
                        this.output.key.col[ind] = batch.key.col[i];
                        this.output[ind] = batch[i];
                        this.output.hash.col[ind] = batch.hash.col[i];
                        if (this.output.Count == Config.DataBatchSize) FlushContents();
                    }
                    else
                    {
                        var temp = Math.Max(vsync[i] + this.skip - 1, vother[i] + this.width);
                        int index = this.intervalMap.Insert(batch.hash.col[i]);
                        this.intervalMap.Values[index].Populate(batch.key.col[i], batch, i, batch.hash.col[i], vother[i] - ((vother[i] - this.offset) % this.progress + this.progress) % this.progress);
                        this.endPointHeap.Insert(temp - ((temp - (this.offset + this.width)) % this.skip + this.skip) % this.skip, index);
                    }
                }
                else if (vother[i] == long.MinValue) // Punctuation
                {
                    if (vsync[i] > this.lastSyncTime) ReachTime(vsync[i]);

                    int ind = this.output.Count++;
                    this.output.vsync.col[ind] = vsync[i] - ((vsync[i] - this.offset) % this.progress + this.progress) % this.progress;
                    this.output.vother.col[ind] = long.MinValue;
                    this.output.key.col[ind] = batch.key.col[i];
                    this.output.payload.col[ind] = default;
                    this.output.hash.col[ind] = batch.hash.col[i];
                    this.output.bitvector.col[ind >> 6] |= (1L << (ind & 0x3f));
                    if (this.output.Count == Config.DataBatchSize) FlushContents();
                }
            }
        }
        batch.Free();
    }

    protected override void FlushContents()
    {
        if (output.Count == 0) return;
        output.Seal();
        this.Observer.OnNext(output);
        GetOutputBatch();
    }

    protected override void DisposeState() => output.Free();

    public override int CurrentlyBufferedOutputCount => output.Count;

    public override int CurrentlyBufferedInputCount => intervalMap.Count;

    [DataContract]
    private struct ActiveEvent
    {
<# foreach (var f in this.fields) { #>
        [DataMember]
        public <#= f.Type.GetCSharpSourceSyntax() #> <#= f.Name #>;
<# } #>
        [DataMember]
        public <#= TKey #> Key;
        [DataMember]
        public int Hash;
        [DataMember]
        public long Other;

        public void Populate(<#= TKey #> key, <#= BatchGeneratedFrom_TKey_TPayload #><#= TKeyTPayloadGenericParameters #> batch, int index, int hash, long other)
        {
            this.Key = key;
<# foreach (var f in this.fields) { #>
            this.<#= f.Name #> = <#= f.AccessExpressionForRowValue("batch", "index") #>;
<# } #>
            this.Hash = hash;
            this.Other = other;
        }

        public override string ToString()
        {
            return "Key='" + Key + "', Payload='"; // + Payload;
        }
    }

}
