<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;

namespace Microsoft.StreamProcessing
{
<#
    foreach (string partitionString in new string[] { string.Empty, "Partitioned" })
    foreach (string ingressType in new string[] { "StreamEvent", "StartEdge", "Interval" })
    {
        string genericArguments = string.IsNullOrEmpty(partitionString) ? "TPayload" : "TKey, TPayload";
        string argumentSuffix = (ingressType != "StreamEvent") ? ", TResult" : string.Empty;
        string egress = (ingressType != "StreamEvent")
            ? "TResult"
            : partitionString + "StreamEvent<" + genericArguments + ">";
        string partitionKeyArgument = !string.IsNullOrEmpty(partitionString) ? "colkey[i].Key, " : string.Empty;
        string partitionFunctionTypeArgument = !string.IsNullOrEmpty(partitionString) ? "TKey, " : string.Empty;
        string singleFunctionConstructor = ingressType == "StartEdge"
            ? "Expression<Func<" + partitionFunctionTypeArgument + "long, TPayload, TResult>>"
            : "Expression<Func<" + partitionFunctionTypeArgument + "long, long, TPayload, TResult>>";
        string singleFunction = ingressType == "StartEdge"
            ? "Func<" + partitionFunctionTypeArgument + "long, TPayload, TResult>"
            : "Func<" + partitionFunctionTypeArgument + "long, long, TPayload, TResult>";
        string inputKey = string.IsNullOrEmpty(partitionString) ? "Empty" : "PartitionKey<TKey>";
#>

    internal sealed class <#= partitionString #><#= ingressType #>ArrayObservable<<#= genericArguments #><#= argumentSuffix #>> : IObservable<ArraySegment<<#= egress #>>>
    {
        internal readonly IStreamable<<#= inputKey #>, TPayload> source;
        internal readonly Func<<#= egress #>[]> generator;
        internal readonly QueryContainer container;
        internal readonly string identifier;
<# switch (ingressType) { #>
<#     case "StartEdge": #>
<#     case "Interval": #>
        internal readonly <#= singleFunctionConstructor #> constructor;
<#         break; #>
<# } #>

        public <#= partitionString #><#= ingressType #>ArrayObservable(
            IStreamable<<#= inputKey #>, TPayload> source,
            Func<<#= egress #>[]> generator,
<# switch (ingressType) { #>
<#     case "StartEdge": #>
<#     case "Interval": #>
            <#= singleFunctionConstructor #> constructor,
<#         break; #>
<# } #>
            QueryContainer container,
            string identifier)
        {
            Contract.Requires(source != null);

            this.source = source;
            this.generator = generator;
<# switch (ingressType) { #>
<#     case "StartEdge": #>
<#     case "Interval": #>
            this.constructor = constructor;
<#         break; #>
<# } #>
            this.container = container;
            this.identifier = identifier;
            if (this.container != null) this.container.RegisterEgressSite(this.identifier);
        }

        public IDisposable Subscribe(IObserver<ArraySegment<<#= egress #>>> observer)
        {
            var pipe = new <#= partitionString #><#= ingressType #>ArrayEgressPipe<<#= genericArguments #><#= argumentSuffix #>>(
                this.generator,
<# if (ingressType == "StartEdge" || ingressType == "Interval") { #>
                this.constructor,
<# } #>
                observer,
                this.container);
            if (this.container != null) this.container.RegisterEgressPipe(this.identifier, pipe);
            return this.source.Subscribe(pipe);
        }
    }
<# } #>
}