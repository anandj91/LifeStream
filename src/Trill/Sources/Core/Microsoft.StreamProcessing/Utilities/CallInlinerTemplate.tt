<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Templates.tt" #>
using System;
using System.Linq.Expressions;

namespace Microsoft.StreamProcessing
{
    internal static class CallInliner
    {
        public static int Call<TComparison>(Expression<Comparison<TComparison>> expression, TComparison input1, TComparison input2)
            => throw new NotImplementedException();
<#
    int maxParameters = 16;
    for (int count = 0; count <= maxParameters; count++)
    {
#>

        public static TOutput Call<<#= Iterate("T$, ", count) #>TOutput>(Expression<Func<<#= Iterate("T$, ", count) #>TOutput>> expression<#= Iterate(", T$ input$", count) #>)
            => throw new NotImplementedException();
<#
    }
#>
    }

}