<#@ template language="C#" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Templates.tt" #>
<#
int maxGroupAggregateParameters = 15;
#>
using System;
using System.Linq.Expressions;
using Microsoft.StreamProcessing.Aggregates;
using Microsoft.StreamProcessing.Internal;

namespace Microsoft.StreamProcessing
{
    public static partial class Streamable
    {
        /// <summary>
        /// Groups input events by a key selector and applies an aggregate on each group.
        /// </summary>
        /// <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
        /// <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
        /// <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
        /// <typeparam name="TState1">The type of the state object maintained by the aggregate operation.</typeparam>
        /// <typeparam name="TOutput1">The type of the results generated by the aggregate operation.</typeparam>
        /// <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
        /// <param name="source">The stream over which to aggregate data.</param>
        /// <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
        /// <param name="aggregate1">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>
        /// <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
        /// <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        public static IStreamable<TOuterKey, TOutput> GroupAggregate<TOuterKey, TInput, TInnerKey, TState1, TOutput1, TOutput>(
            this IStreamable<TOuterKey, TInput> source,
            Expression<Func<TInput, TInnerKey>> keySelector,
            Func<Window<CompoundGroupKey<TOuterKey, TInnerKey>, TInput>, IAggregate<TInput, TState1, TOutput1>> aggregate1,
            Expression<Func<GroupSelectorInput<TInnerKey>, TOutput1, TOutput>> merger)
        {
            Invariant.IsNotNull(source, nameof(source));
            Invariant.IsNotNull(keySelector, nameof(keySelector));
            Invariant.IsNotNull(aggregate1, nameof(aggregate1));
            Invariant.IsNotNull(merger, nameof(merger));

            if (typeof(TOuterKey) == typeof(Empty) && source.Properties.IsStartEdgeOnly && Config.MapArity == 1)
            {
                var emptySource = (IStreamable<Empty, TInput>)source;
                var emptyAggregate1 = (Func<Window<CompoundGroupKey<Empty, TInnerKey>, TInput>, IAggregate<TInput, TState1, TOutput1>>)aggregate1;
                var inlinedMerger = GroupInputInliner<TInnerKey, TOutput1, TOutput>.Transform(merger);

                return (IStreamable<TOuterKey, TOutput>)(object)new GroupedWindowStreamable<TInnerKey, TInput, TState1, TOutput1, TOutput>
                    (emptySource, emptyAggregate1(new Window<CompoundGroupKey<Empty, TInnerKey>, TInput>(emptySource.Properties.GroupNested(keySelector))), keySelector, inlinedMerger);
            }

            return source.Map(keySelector).Reduce(s => s.Aggregate(aggregate1), merger);
        }

        /// <summary>
        /// Groups input events by a key selector and applies an aggregate on each group.
        /// </summary>
        /// <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
        /// <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
        /// <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
        /// <typeparam name="TState1">The type of the state object maintained by the aggregate operation.</typeparam>
        /// <typeparam name="TOutput1">The type of the results generated by the aggregate operation.</typeparam>
        /// <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
        /// <param name="source">The stream over which to aggregate data.</param>
        /// <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
        /// <param name="aggregate1">A concrete reference to an aggregate operator.</param>
        /// <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
        /// <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        internal static IStreamable<TOuterKey, TOutput> GroupAggregate<TOuterKey, TInput, TInnerKey, TState1, TOutput1, TOutput>(
            this IStreamable<TOuterKey, TInput> source,
            Expression<Func<TInput, TInnerKey>> keySelector,
            IAggregate<TInput, TState1, TOutput1> aggregate1,
            Expression<Func<GroupSelectorInput<TInnerKey>, TOutput1, TOutput>> merger)
        {
            Invariant.IsNotNull(source, nameof(source));
            Invariant.IsNotNull(keySelector, nameof(keySelector));
            Invariant.IsNotNull(aggregate1, nameof(aggregate1));
            Invariant.IsNotNull(merger, nameof(merger));

            return source.Map(keySelector).Reduce(s => s.Aggregate(aggregate1), merger);
        }
<#
    // Create group & aggregate varients. We skip count = 1 because single aggregate implementation is different and already implemented.
    for (int count = 2; count <= maxGroupAggregateParameters; count++)
    {
#>

        /// <summary>
        /// Groups input events by a key selector and applies multiple aggregates on each group.
        /// </summary>
        /// <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
        /// <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
        /// <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
<#= IterateLine("        /// <typeparam name=\"TState$\">The type of the state object maintained by the aggregate operation in position $.</typeparam>", count) #>
<#= IterateLine("        /// <typeparam name=\"TOutput$\">The type of the results generated by the aggregate operation in position $.</typeparam>", count) #>
        /// <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
        /// <param name="source">The stream over which to aggregate data.</param>
        /// <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
<#= IterateLine("        /// <param name=\"aggregate$\">A function from a window to an aggregate object. Used to give the developer an autocomplete experience in Visual Studio to pick from a set of available aggregates.</param>", count) #>
        /// <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
        /// <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        public static IStreamable<TOuterKey, TOutput> GroupAggregate<TOuterKey, TInput, TInnerKey, <#= IterateComma("TState$, TOutput$", count) #>, TOutput>(
            this IStreamable<TOuterKey, TInput> source,
            Expression<Func<TInput, TInnerKey>> keySelector,
<#= IterateLine("            Func<Window<CompoundGroupKey<TOuterKey, TInnerKey>, TInput>, IAggregate<TInput, TState$, TOutput$>> aggregate$,", count) #>
            Expression<Func<GroupSelectorInput<TInnerKey>, <#= IterateComma("TOutput$", count) #>, TOutput>> merger)
        {
            Invariant.IsNotNull(source, nameof(source));
            Invariant.IsNotNull(keySelector, nameof(keySelector));
<#= IterateLine("            Invariant.IsNotNull(aggregate$, nameof(aggregate$));", count) #>
            Invariant.IsNotNull(merger, nameof(merger));

            Expression<Func<<#= IterateComma("TOutput$", count) #>, StructTuple<<#= IterateComma("TOutput$", count) #>>>> aggregateMerger =
                (<#= IterateComma("output$", count) #>) => new StructTuple<<#= IterateComma("TOutput$", count) #>>
                {
<#= IterateCommaLine("                    Item$ = output$", count) #>
                };

            Expression<Func<GroupSelectorInput<TInnerKey>, StructTuple<<#= IterateComma("TOutput$", count) #>>, TOutput>> reducerTemplate =
                (key, outputs) => CallInliner.Call(merger, key, <#= IterateComma("outputs.Item$", count) #>);

            if (typeof(TOuterKey) == typeof(Empty) && source.Properties.IsStartEdgeOnly && Config.MapArity == 1)
            {
                var emptySource = (IStreamable<Empty, TInput>)source;
<#= IterateLine("                var emptyAggregate$ = (Func<Window<CompoundGroupKey<Empty, TInnerKey>, TInput>, IAggregate<TInput, TState$, TOutput$>>)aggregate$;", count) #>

                var window = new Window<CompoundGroupKey<Empty, TInnerKey>, TInput>(emptySource.Properties.GroupNested(keySelector));
<#= IterateLine("                var agg$ = emptyAggregate$(window);", count) #>
                var compound = AggregateFunctions.Combine(<#= IterateComma("agg$", count) #>, aggregateMerger);

                return (IStreamable<TOuterKey, TOutput>)(object)new GroupedWindowStreamable<TInnerKey, TInput, StructTuple<<#= IterateComma("TState$", count) #>>, StructTuple<<#= IterateComma("TOutput$", count) #>>, TOutput>
                        (emptySource, compound, keySelector, GroupInputInliner<TInnerKey, StructTuple<<#= IterateComma("TOutput$", count) #>>, TOutput>.Transform(reducerTemplate.InlineCalls()));
            }

            return source.Map(keySelector)
                         .Reduce(
                             s => s.Aggregate(<#= IterateComma("aggregate$", count) #>, aggregateMerger),
                             reducerTemplate.InlineCalls());
        }

        /// <summary>
        /// Groups input events by a key selector and applies multiple aggregates on each group.
        /// </summary>
        /// <typeparam name="TOuterKey">The type of the grouping key of the stream coming into the aggregation operation.</typeparam>
        /// <typeparam name="TInput">The type of the payload in the input stream.</typeparam>
        /// <typeparam name="TInnerKey">The result type of the expression used to group data in the aggregation.</typeparam>
<#= IterateLine("        /// <typeparam name=\"TState$\">The type of the state object maintained by the aggregate operation in position $.</typeparam>", count) #>
<#= IterateLine("        /// <typeparam name=\"TOutput$\">The type of the results generated by the aggregate operation in position $.</typeparam>", count) #>
        /// <typeparam name="TOutput">The type of the payloads of the resulting stream.</typeparam>
        /// <param name="source">The stream over which to aggregate data.</param>
        /// <param name="keySelector">An expression describing how to group data for use in the aggregate expression.</param>
<#= IterateLine("        /// <param name=\"aggregate$\">A concrete reference to an aggregate operator.</param>", count) #>
        /// <param name="merger">An expression describing how to merge the grouping key and the result of the aggregation into a result payload.</param>
        /// <returns>A stream of grouping key type <typeparamref name="TOuterKey"/> and result payload type <typeparamref name="TOutput"/>.</returns>
        internal static IStreamable<TOuterKey, TOutput> GroupAggregate<TOuterKey, TInput, TInnerKey, <#= IterateComma("TState$, TOutput$", count) #>, TOutput>(
            this IStreamable<TOuterKey, TInput> source,
            Expression<Func<TInput, TInnerKey>> keySelector,
<#= IterateLine("            IAggregate<TInput, TState$, TOutput$> aggregate$,", count) #>
            Expression<Func<GroupSelectorInput<TInnerKey>, <#= IterateComma("TOutput$", count) #>, TOutput>> merger)
        {
            Invariant.IsNotNull(source, nameof(source));
            Invariant.IsNotNull(keySelector, nameof(keySelector));
<#= IterateLine("            Invariant.IsNotNull(aggregate$, nameof(aggregate$));", count) #>
            Invariant.IsNotNull(merger, nameof(merger));

            Expression<Func<<#= IterateComma("TOutput$", count) #>, StructTuple<<#= IterateComma("TOutput$", count) #>>>> aggregateMerger =
                (<#= IterateComma("output$", count) #>) => new StructTuple<<#= IterateComma("TOutput$", count) #>>
                {
<#= IterateCommaLine("                    Item$ = output$", count) #>
                };
            Expression<Func<GroupSelectorInput<TInnerKey>, StructTuple<<#= IterateComma("TOutput$", count) #>>, TOutput>> reducerTemplate =
                (key, outputs) => CallInliner.Call(merger, key, <#= IterateComma("outputs.Item$", count) #>);

            return source.Map(keySelector)
                         .Reduce(
                             s => s.Aggregate(<#= IterateComma("aggregate$", count) #>, aggregateMerger),
                             reducerTemplate.InlineCalls());
        }
<#
    }
#>
    }
}