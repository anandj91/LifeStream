// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class SafeBatchTemplate : CommonBaseTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

    List<string> genericParamList = new List<string>();
    var TKEY = keyType.GetCSharpSourceSyntax(ref genericParamList);
    var keyGenericParameterCount = genericParamList.Count;
    var TPAYLOAD = payloadType.GetCSharpSourceSyntax(ref genericParamList);
    var payloadGenericParmeterList = genericParamList.Skip(keyGenericParameterCount);
    var genericParameters = 0 < genericParamList.Count ? "<" + String.Join(",", genericParamList) + ">" : string.Empty;
    var payloadGenericParameters = 0 < payloadGenericParmeterList.Count() ? "<" + String.Join(",", payloadGenericParmeterList) + ">" : string.Empty;
    var payloadIsAnon = payloadType.IsAnonymousType();
    if (payloadIsAnon) TPAYLOAD = TPAYLOAD.CleanUpIdentifierName();

    Type t;

            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Generic;
");
 if (payloadIsAnon) { 
            this.Write("using System.Reflection;\r\n");
 } 
            this.Write("using System.Runtime.CompilerServices;\r\nusing System.Runtime.Serialization;\r\nusin" +
                    "g Microsoft.StreamProcessing;\r\nusing Microsoft.StreamProcessing.Internal;\r\nusing" +
                    " Microsoft.StreamProcessing.Internal.Collections;\r\n");
 if (this.keyType.Namespace != null && this.keyType.Namespace != "Microsoft.StreamProcessing") { 
            this.Write("using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.keyType.Namespace));
            this.Write(";\r\n");
 } 
 if (this.payloadType.Namespace != null) { 
            this.Write("using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.payloadType.Namespace));
            this.Write(";\r\n");
 } 
            this.Write("\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(": Name of type that is the key type.\r\n// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(": Name of type that is the payload type.\r\n\r\n[assembly: IgnoresAccessChecksTo(\"Mic" +
                    "rosoft.StreamProcessing\")]\r\n[DataContract]\r\npublic sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            this.Write(" : StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(">\r\n{\r\n\r\n");
 if (this.payloadMightBeNull) { 
            this.Write("// When the payload is a reference type (but *not* anonymous), then there needs t" +
                    "o be a bit\r\n// indicating if the instance corresponding to any particular row is" +
                    " actually null.\r\n    [DataMember]\r\n    public ColumnBatch<long> _nullnessvector;" +
                    "\r\n");
 } 
            this.Write("\r\n// Payload Fields\r\n");

  foreach (var f in this.fields) {

            this.Write("  [DataMember]\r\n");

    if (f.OptimizeString()) {

            this.Write("  public MultiString ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");

    } else {

            this.Write("  public ColumnBatch<");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n");

    }


    if (payloadIsAnon) {

            this.Write("  private PropertyInfo ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(").GetProperty(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("\");\r\n");
 } 
 } 
            this.Write("\r\n  public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write("()\r\n    : base() {\r\n  }\r\n\r\n/*\r\n  public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write("(bool allocateColumns)\r\n    : base(true) {\r\n    if (allocateColumns) {\r\n    ");
 foreach (var f in this.fields) { 
            this.Write("\r\n    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = new ColumnBatch<");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(">(Config.DataBatchSize);\r\n    ");
 } 
            this.Write("    ");
 if (this.payloadMightBeNull) { 
            this.Write("    this._nullnessvector = new ColumnBatch<long>(1 + (Config.DataBatchSize >>6));" +
                    "\r\n    ");
 } 
            this.Write("    }\r\n  }\r\n*/\r\n\r\n");
 var includeDebugInfo = Config.CodegenOptions.GenerateDebugInfo;
#if DEBUG
includeDebugInfo = true;
#endif

 if (includeDebugInfo) { 
            this.Write("  static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write("() {\r\n");
 if ((Config.CodegenOptions.BreakIntoCodeGen & Config.CodegenOptions.DebugFlags.Batches) != 0)
    { 
            this.Write("        if (System.Diagnostics.Debugger.IsAttached)\r\n            System.Diagnosti" +
                    "cs.Debugger.Break();\r\n        else\r\n            System.Diagnostics.Debugger.Laun" +
                    "ch();\r\n");
  } 
            this.Write("  }\r\n");
 } 
            this.Write("\r\n  public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write("(MemoryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> pool)\r\n    : base(pool) {\r\n  }\r\n\r\n  public override void AllocatePayload() {\r\n");

   if (this.keyType.KeyTypeNeedsGeneratedMemoryPool() || !this.payloadType.MemoryPoolHasGetMethodFor()) {

            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(keyType, payloadType)));
            this.Write(" <");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> pool = this.memPool as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(keyType, payloadType)));
            this.Write(" <");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(">;\r\n");

foreach (var f in this.fields) {


if (f.Type == this.payloadType) {

            this.Write("    pool.GetPayload(out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
 } else { 
            this.Write("    pool.Get(out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
 } 
 } 
 }  else { 
 foreach (var f in this.fields) { 
            this.Write("    this.memPool.Get(out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
 } 
 } 
 if (this.payloadMightBeNull) { 
            this.Write("\r\n  this.memPool.GetBV(out this._nullnessvector);\r\n");
 } 
            this.Write("  }\r\n\r\n  protected override void AssignPayloadPool(MemoryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> memPool)\r\n  {\r\n");
 if (!payloadIsAnon && this.noPublicFields) { 
            this.Write("  this.payload.pool = memPool.payloadPool;\r\n");
 } else {
  t = this.payloadType;
  if (t != typeof(int) && t != typeof(long) && t != typeof(string)) {

            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(keyType, payloadType)));
            this.Write(" <");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> pool = memPool as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(keyType, payloadType)));
            this.Write(" <");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(">;\r\n");

  foreach (var f in this.fields.Where(fld => !fld.OptimizeString())) {
    var t2 = f.Type;
    var idForT = Transformer.GetValidIdentifier(t2);
    string poolName;
    if (t2 == typeof(int))
      poolName = "intPool";
    else if (t2 == typeof(long))
      poolName = "longPool";
    else if (t2 == typeof(byte))
      poolName = "bytePool";
    else if (t2 == typeof(string)) {
      if (f.OptimizeString()) {
        poolName = "charArrayPool";
      } else {
        poolName = "stringPool";
      }
    } else {
      poolName = "_" + idForT + "_Pool";
    }

            this.Write("    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".pool = pool.");
            this.Write(this.ToStringHelper.ToStringWithCulture(poolName));
            this.Write(";\r\n");

  }
}
}

            this.Write("  }\r\n\r\n  public override void CloneFrom(StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> value, bool swing = false) {\r\n\r\n    // TODO:\r\n    // GENERATE: this.payload = v" +
                    "alue.payload;\r\n    // GENERATE: value.payload.IncrementRefCount(1);\r\n    var bat" +
                    "ch = value as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            this.Write(";\r\n\r\n    if (batch != null) {\r\n        // Payload Fields\r\n    ");
 foreach (var f in this.fields) { 
            this.Write("    ");
 if (f.OptimizeString()) { 
            this.Write("\r\n        if (swing) {\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n        } else {\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Clone();\r\n        }\r\n    ");
 } else { 
            this.Write("\r\n        this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(";\r\n    ");
 } 
            this.Write("    ");
 } 
            this.Write("    ");
 if (this.payloadMightBeNull) { 
            this.Write("          this._nullnessvector = batch._nullnessvector;\r\n    ");
 } 
            this.Write("\r\n        if (!swing)\r\n        {\r\n            // Payload fields\r\n    ");
 foreach (var f in this.fields.Where(fld => !fld.OptimizeString())) { 
            this.Write("\r\n            batch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".IncrementRefCount(1);\r\n    ");
 } 
            this.Write("    ");
 if (this.payloadMightBeNull) { 
            this.Write("            batch._nullnessvector.IncrementRefCount(1);\r\n    ");
 } 
            this.Write("\r\n        }\r\n    } else {\r\n        this.AllocatePayload();\r\n        for (int i = " +
                    "0; i < value.Count; i++) {\r\n            var payload = value.payload.col[i];\r\n   " +
                    "         ");
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n              this._nullnessvector.col[i >> 6" +
                    "] |= (1L << (i & 0x3f));\r\n              continue;\r\n            }\r\n            ");
 } 
            this.Write("            ");
 foreach (var f in this.fields) { 
            this.Write("\r\n            ");
 if (this.noPublicFields) { 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i] = payload;\r\n            ");
 } else { 
            this.Write("              ");
 if (payloadIsAnon) { 
            this.Write("                ");
 if (f.OptimizeString()) { 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n                ");
 } else { 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n                ");
 } 
            this.Write("              ");
 } else { 
            this.Write("                ");
 if (f.OptimizeString()) { 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n                ");
 } else { 
            this.Write("\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n                ");
 } 
            this.Write("            ");
 } 
            this.Write("            ");
 } 
            this.Write("            ");
 } 
            this.Write("\r\n        }\r\n        value.ReleasePayload();\r\n        value.payload = null; // nu" +
                    "ll out pointer so base call doesn\'t mistakenly copy it.\r\n    }\r\n    base.CloneFr" +
                    "om(value, swing);\r\n  }\r\n\r\n  public override void ReleasePayload() {\r\n");
 foreach (var f in this.fields) { 
            this.Write("      if (this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" != null)\r\n");
 if (f.OptimizeString()) { 
            this.Write("          this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Dispose();\r\n");
 } else { 
            this.Write("          this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Return();\r\n");
 } 
 } 
 if (this.payloadMightBeNull) { 
            this.Write("\r\n      this._nullnessvector.ReturnClear();\r\n");
 } 
            this.Write("  }\r\n\r\n  public override bool Add(long vsync, long vother, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(" key, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(" payload) {\r\n\r\n    ");
 if (needsPolymorphismCheck) { 
            this.Write("    if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(") != payload.GetType()) throw new StreamProcessingException(\"Cannot do columnar o" +
                    "peration on polymorphic sets.  The value\'s type \" + payload.GetType().FullName +" +
                    " \" does not match the declared payload type.\");\r\n    ");
 } 
            this.Write("\r\n    // Payload Fields\r\n");
 if (this.payloadMightBeNull) { 
            this.Write("    if (payload == null) {\r\n        this._nullnessvector.col[base.Count >> 6] |= " +
                    "(1L << (base.Count & 0x3f));\r\n        goto CallBase;\r\n    }\r\n");
 } 

  if (this.noPublicFields)
  {

            this.Write("    this.payload.col[base.Count] = payload;\r\n");

  }
  else
  {
      foreach (var f in this.fields)
      {
        if (payloadIsAnon)
        {

 if (f.OptimizeString()) { 
            this.Write("    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[base.Count] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        }
        else
        {

 if (f.OptimizeString()) { 
            this.Write("    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("    this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[base.Count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

        }
      }

            this.Write("\r\n");
 } 
            this.Write("\r\n");
 if (this.payloadMightBeNull) { 
            this.Write("    CallBase:\r\n");
 } 
            this.Write("    return base.Add(vsync, vother, key, payload);\r\n  }\r\n\r\n    public unsafe overr" +
                    "ide bool Add(\r\n        ArraySegment<StreamEvent<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@">> largeBatch,
        ref long currentTime,
        ref int offset,
        out bool encounteredPunctuation)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        encounteredPunctuation = false; // let's be optimistic!
        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {

");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("\r\n        while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        {\r" +
                    "\n            ");
 if (needsPolymorphismCheck) { 
            this.Write("            if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@") != largeBatch.Array[localOffset].Payload.GetType()) throw new StreamProcessingException(""Cannot do columnar operation on polymorphic sets.  The value's type "" + largeBatch.Array[localOffset].GetType().FullName + "" does not match the declared payload type."");
            ");
 } 
            this.Write(@"            if (largeBatch.Array[localOffset].OtherTime == long.MinValue) {
                // BUGBUG: see StreamEvent<T>.IsPunctuation if that gets inlined, then use it here
                encounteredPunctuation = true;
                base.Count = count;
                offset = localOffset;
                return false;
            }
            if (largeBatch.Array[localOffset].SyncTime < currentTime) {
                throw new IngressException(""Out-of-order event encountered during ingress, under a disorder policy of Throw"");
            }
            currentTime = largeBatch.Array[localOffset].SyncTime;
            vsync[count] = largeBatch.Array[localOffset].SyncTime;
            vother[count] = largeBatch.Array[localOffset].OtherTime;
            var payload = largeBatch.Array[localOffset].Payload;
");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("            localOffset++;\r\n            count++;\r\n        }\r\n\r\n        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n    public unsafe override bool Add(\r\n        ArraySegment<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> largeBatch,\r\n        ref long currentTime,\r\n        ref int offset,\r\n        Fu" +
                    "nc<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(", long> startEdgeExtractor,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@", long> endEdgeExtractor)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {

");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("\r\n        while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        {\r" +
                    "\n            ");
 if (needsPolymorphismCheck) { 
            this.Write("            if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@") != largeBatch.Array[localOffset].GetType()) throw new StreamProcessingException(""Cannot do columnar operation on polymorphic sets.  The value's type "" + largeBatch.Array[localOffset].GetType().FullName + "" does not match the declared payload type."");
            ");
 } 
            this.Write(@"            var start = startEdgeExtractor(largeBatch.Array[localOffset]);
            if (start < currentTime) {
                throw new IngressException(""Out-of-order event encountered during ingress, under a disorder policy of Throw"");
            }
            currentTime = start;
            vsync[count] = start;
            vother[count] = endEdgeExtractor(largeBatch.Array[localOffset]);
            var payload = largeBatch.Array[localOffset];
");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("            localOffset++;\r\n            count++;\r\n        }\r\n\r\n        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write(@"        } // end fixed vother
        } // end fixed vsync

        base.Count = count;
        offset = localOffset;
        return count == this.vsync.col.Length;
    }

    public unsafe override bool Add<T>(
        ArraySegment<PartitionedStreamEvent<T, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(">> largeBatch,\r\n        Func<T, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write(@"> partitionConstructor,
        Dictionary<T, long> currentTime,
        ref int offset)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {

");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("\r\n        while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        {\r" +
                    "\n            ");
 if (needsPolymorphismCheck) { 
            this.Write("            if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@") != largeBatch.Array[localOffset].Payload.GetType()) throw new StreamProcessingException(""Cannot do columnar operation on polymorphic sets.  The value's type "" + largeBatch.Array[localOffset].GetType().FullName + "" does not match the declared payload type."");
            ");
 } 
            this.Write(@"            var partition = largeBatch.Array[localOffset].PartitionKey;
            if (currentTime.ContainsKey(partition) && largeBatch.Array[localOffset].SyncTime < currentTime[partition]) {
                throw new IngressException(""Out-of-order event encountered during ingress, under a disorder policy of Throw"");
            }
            currentTime[partition] = largeBatch.Array[localOffset].SyncTime;
            vsync[count] = largeBatch.Array[localOffset].SyncTime;
            vother[count] = largeBatch.Array[localOffset].OtherTime;
            key.col[count] = partitionConstructor(partition);
            hash.col[count] = partition.GetHashCode();
            var payload = largeBatch.Array[localOffset].Payload;
            if (largeBatch.Array[localOffset].OtherTime == long.MinValue) {
                bitvector.col[count >> 6] |= (1L << (count & 0x3f));
            }
");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("            localOffset++;\r\n            count++;\r\n        }\r\n\r\n        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n    public unsafe override bool Add<T>(\r\n        ArraySegment" +
                    "<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> largeBatch,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(", T> partitionExtractor,\r\n        Func<T, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write("> partitionConstructor,\r\n        Dictionary<T, long> currentTime,\r\n        ref in" +
                    "t offset,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@", long> startEdgeExtractor)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {

");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("\r\n        while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        {\r" +
                    "\n            ");
 if (needsPolymorphismCheck) { 
            this.Write("            if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@") != largeBatch.Array[localOffset].GetType()) throw new StreamProcessingException(""Cannot do columnar operation on polymorphic sets.  The value's type "" + largeBatch.Array[localOffset].GetType().FullName + "" does not match the declared payload type."");
            ");
 } 
            this.Write(@"            var partition = partitionExtractor(largeBatch.Array[localOffset]);
            var start = startEdgeExtractor(largeBatch.Array[localOffset]);
            if (currentTime.ContainsKey(partition) && start < currentTime[partition]) {
                throw new IngressException(""Out-of-order event encountered during ingress, under a disorder policy of Throw"");
            }
            currentTime[partition] = start;
            vsync[count] = start;
            vother[count] = StreamEvent.InfinitySyncTime;
            key.col[count] = partitionConstructor(partition);
            hash.col[count] = partition.GetHashCode();
            var payload = largeBatch.Array[localOffset];
");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("            localOffset++;\r\n            count++;\r\n        }\r\n\r\n        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n    public unsafe override bool Add<T>(\r\n        ArraySegment" +
                    "<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("> largeBatch,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(", T> partitionExtractor,\r\n        Func<T, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKEY));
            this.Write("> partitionConstructor,\r\n        Dictionary<T, long> currentTime,\r\n        ref in" +
                    "t offset,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(", long> startEdgeExtractor,\r\n        Func<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@", long> endEdgeExtractor)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {

");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("\r\n        while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        {\r" +
                    "\n            ");
 if (needsPolymorphismCheck) { 
            this.Write("            if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@") != largeBatch.Array[localOffset].GetType()) throw new StreamProcessingException(""Cannot do columnar operation on polymorphic sets.  The value's type "" + largeBatch.Array[localOffset].GetType().FullName + "" does not match the declared payload type."");
            ");
 } 
            this.Write(@"            var partition = partitionExtractor(largeBatch.Array[localOffset]);
            var start = startEdgeExtractor(largeBatch.Array[localOffset]);
            if (currentTime.ContainsKey(partition) && start < currentTime[partition]) {
                throw new IngressException(""Out-of-order event encountered during ingress, under a disorder policy of Throw"");
            }
            currentTime[partition] = start;
            vsync[count] = start;
            vother[count] = endEdgeExtractor(largeBatch.Array[localOffset]);
            key.col[count] = partitionConstructor(partition);
            hash.col[count] = partition.GetHashCode();
            var payload = largeBatch.Array[localOffset];
");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("            localOffset++;\r\n            count++;\r\n        }\r\n\r\n        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n    public unsafe override bool Add(\r\n        ArraySegment<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@"> largeBatch,
        ref long currentTime,
        ref int offset)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;

        fixed (long* vsync = this.vsync.col) {
        fixed (long* vother = this.vother.col) {
");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("            while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        " +
                    "    {\r\n                var payload = largeBatch.Array[localOffset];\r\n           " +
                    "     ");
 if (needsPolymorphismCheck) { 
            this.Write("                if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(") != payload.GetType()) throw new StreamProcessingException(\"Cannot do columnar o" +
                    "peration on polymorphic sets.  The value\'s type \" + largeBatch.Array[localOffset" +
                    "].GetType().FullName + \" does not match the declared payload type.\");\r\n         " +
                    "       ");
 } 
            this.Write("                currentTime = DateTimeOffset.UtcNow.Ticks;\r\n                vsync" +
                    "[count] = currentTime;\r\n                vother[count] = StreamEvent.InfinitySync" +
                    "Time;\r\n");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write("                localOffset++;\r\n                count++;\r\n            }\r\n        " +
                    "");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n    public unsafe override bool Add(\r\n        ArraySegment<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(@"> largeBatch,
        ref long currentTime,
        ref int offset,
        int eventsPerSample,
        ref int currentSync,
        ref int eventCount,
        out bool encounteredPunctuation)
    {
        var n = largeBatch.Offset + largeBatch.Count;
        var count = base.Count;
        var localOffset = offset;
        encounteredPunctuation = false; // let's be optimistic!

        fixed (long* vsync = this.vsync.col)  {
        fixed (long* vother = this.vother.col) {
");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.TypeName));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col) {\r\n");
 } else { 
            this.Write("\r\n        var ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n");
 } 
 } 
            this.Write("            while ((count < Config.DataBatchSize) && (localOffset < n))\r\n        " +
                    "    {\r\n                var payload = largeBatch.Array[localOffset];\r\n           " +
                    "     ");
 if (needsPolymorphismCheck) { 
            this.Write("                if (typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(") != payload.GetType()) throw new StreamProcessingException(\"Cannot do columnar o" +
                    "peration on polymorphic sets.  The value\'s type \" + largeBatch.Array[localOffset" +
                    "].GetType().FullName + \" does not match the declared payload type.\");\r\n         " +
                    "       ");
 } 
            this.Write("                currentTime = currentSync;\r\n                vsync[count] = curren" +
                    "tTime;\r\n                vother[count] = StreamEvent.InfinitySyncTime;\r\n");

  if (this.noPublicFields) {

            this.Write("            this.payload.col[count] = payload;\r\n");
 } else { 
 if (this.payloadMightBeNull) { 
            this.Write("            if (payload == null) {\r\n                this._nullnessvector.col[coun" +
                    "t >> 6] |= (1L << (count & 0x3f));\r\n                goto BottomOfLoop;\r\n        " +
                    "    }\r\n");
 } 
            this.Write("\r\n");
 foreach (var f in this.fields) {
        if (payloadIsAnon) {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null));\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[offset] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(payload, null);\r\n");
 } 
            this.Write("\r\n");

        } else {

 if (f.OptimizeString()) { 
            this.Write("            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_col[count] = payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 

      }

            this.Write("\r\n");
 } } 
 if (this.payloadMightBeNull) { 
            this.Write("            BottomOfLoop:\r\n");
 } 
            this.Write(@"                localOffset++;
                count++;
                eventCount++;

                if (eventCount == eventsPerSample)
                {
                    eventCount = 0;
                    currentSync++;
                    encounteredPunctuation = true;
                    break;
                }
            }
        ");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        } // end fixed ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("\r\n        ");
 } 
            this.Write("        } // end fixed vother\r\n        } // end fixed vsync\r\n\r\n        base.Count" +
                    " = count;\r\n        offset = localOffset;\r\n        return count == this.vsync.col" +
                    ".Length;\r\n    }\r\n\r\n  public override void Seal()\r\n  {\r\n    // Payload fields\r\n");
 foreach (var f in this.fields) {
 if (f.OptimizeString()) { 
            this.Write("        if (this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" != null)\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Seal();\r\n");
 } else { 
            this.Write("        // this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".UsedLength = Count;\r\n");
 } 
            this.Write("\r\n");
 } 
            this.Write("        base.Seal();\r\n  }\r\n\r\n  public override void EnsureConsistency()\r\n  {\r\n   " +
                    " // Payload fields\r\n");
 foreach (var f in this.fields) {
 if (f.OptimizeString()) { 
            this.Write("        // this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".Seal();\r\n");
 } else { 
            this.Write("        if (this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" != null)\r\n            this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".UsedLength = base.Count;\r\n");
 } 
            this.Write("\r\n");
 } 
 if (this.payloadMightBeNull) { 
            this.Write("        if (this._nullnessvector != null)\r\n            this._nullnessvector.UsedL" +
                    "ength = (1 + (base.Count >> 6));\r\n");
 } 
            this.Write("        base.EnsureConsistency();\r\n  }\r\n\r\npublic override ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(" this[int index]\r\n{\r\n    get\r\n    {\r\n        ");
 if (this.payloadMightBeNull) { 
            this.Write("        if ((this._nullnessvector.col[index >> 6] & (1L << (index & 0x3f)))!=0) r" +
                    "eturn default;\r\n        ");
 } 
            this.Write("        ");
 if (this.noPublicFields) { 
            this.Write("\r\n        return this.payload.col[index];\r\n\r\n        ");
 } else { 
            this.Write("\r\n        ");
 if (payloadIsAnon) {
          var fieldArgs = this.fields.Select(f => f.OptimizeString() ? String.Format(", this.{0}[index]", f.Name) : String.Format(", this.{0}.col[index]", f.Name)).Aggregate((x, y) => x + y);
        
            this.Write("        var payload = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(")Activator.CreateInstance(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write(") ");
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldArgs));
            this.Write(" );\r\n        ");
 } else { 
            this.Write("        var payload = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPAYLOAD));
            this.Write("();\r\n        ");
 foreach (var f in this.fields) { 
            this.Write("        if (this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" != null)\r\n        ");
 if (f.OptimizeString()) { 
            this.Write("            payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(" = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[index];\r\n        ");
 } else { 
            this.Write("            payload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(" = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[index];\r\n        ");
 } 
            this.Write("        ");
 } 
            this.Write("        ");
 } 
            this.Write("\r\n        return payload;\r\n        ");
 } 
            this.Write("\r\n    }\r\n    set\r\n    {\r\n        ");
 if (this.payloadMightBeNull) { 
            this.Write("\r\n        if (value == null) {\r\n            this._nullnessvector.col[index >> 6] " +
                    "|= (1L << (index & 0x3f));\r\n            return;\r\n        }\r\n        ");
 } 
            this.Write("        ");
 if (this.noPublicFields) { 
            this.Write("\r\n        this.payload.col[index] = value;\r\n        ");
 } else { 
            this.Write("\r\n        ");
 foreach (var f in this.fields) { 
            this.Write("        ");
 if (payloadIsAnon) { 
 if (f.OptimizeString()) { 
            this.Write("\r\n        //if (index != Count) throw new InvalidOperationException(\"Bad invocati" +
                    "on of setter with multi-strings\");\r\n        this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString((");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(value, null));\r\n");
 } else { 
            this.Write("\r\n        this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[index] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.GetCSharpSourceSyntax()));
            this.Write(") ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("_Property.GetValue(value, null);\r\n");
 } 
            this.Write("\r\n        ");
 } else { 
 if (f.OptimizeString()) { 
            this.Write("\r\n        //if (index != Count) throw new InvalidOperationException(\"Bad invocati" +
                    "on of setter with multi-strings\");\r\n        this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".AddString(value.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(");\r\n");
 } else { 
            this.Write("\r\n        this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[index] = value.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 
            this.Write("        ");
 } 
            this.Write("        ");
 } 
            this.Write("        ");
 } 
            this.Write("    }\r\n}\r\n\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
