<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;

namespace Microsoft.StreamProcessing
{
    /// <summary>
    /// Streamable extension methods.
    /// </summary>
    public static partial class Streamable
    {
<#
    foreach (var hasContainer in new [] { false, true })
    {
        string methodName = (hasContainer ? "Register" : "To")
                          + "Atemporal"
                          + (hasContainer ? "Output" : "Observable");
#>
        /// <summary>
<#  if (hasContainer)
    { #>
        /// Registers an IStreamable object as an output of a query, with output as a list of change events.
<#  }
    else
    { #>
        /// Exports a streamable as an observable of change list events. Produces events that represent either insertions or deletions.
<#  } #>
        /// </summary>
        /// <typeparam name="TPayload">The type of object being streamed</typeparam>
<#  if (hasContainer)
    { #>
        /// <param name="container">The query container to which an egress point is being added.</param>
        /// <param name="identifier">A string that can uniquely identify the point of egress in the query.</param>
<# } #>
        /// <param name="stream">An IStreamable object that is intended to be an output to the query.</param>
        /// <returns>An IObservable object of events for output data from the query.</returns>
        public static IObservable<TPayload> <#= methodName #><TPayload>(
<# if (hasContainer) { #>
            this QueryContainer container,
<# } #>
            <# if (!hasContainer) { #>this <# } #>IStreamable<Empty, TPayload> stream<# if (hasContainer) { #>,
            string identifier = null<# } #>)
        {
            Invariant.IsNotNull(stream, nameof(stream));

            return stream.ToAtemporalObservable(<#= hasContainer ? "container" : "null" #>, <# if (hasContainer) { #>identifier ?? <# } #>Guid.NewGuid().ToString());
        }

<# } #>
        internal static IObservable<TPayload> ToAtemporalObservable<TPayload>(
            this IStreamable<Empty, TPayload> stream,
            QueryContainer container,
            string identifier)
        {
            Invariant.IsNotNull(stream, nameof(stream));

            return new MonotonicObservable<TPayload>(stream, container, identifier);
        }
    }
}