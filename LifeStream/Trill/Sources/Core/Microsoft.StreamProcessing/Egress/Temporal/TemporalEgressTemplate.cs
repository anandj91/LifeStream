// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class TemporalEgressTemplate : CommonPipeTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Diagnostics.Contracts;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Internal;

[DataContract]
internal sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(" : EgressBoundary<");
            this.Write(this.ToStringHelper.ToStringWithCulture(inputKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(egress));
            this.Write(">\r\n{\r\n    [Obsolete(\"Used only by serialization. Do not call directly.\")]\r\n    pu" +
                    "blic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("() { }\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("(\r\n        IObserver<");
            this.Write(this.ToStringHelper.ToStringWithCulture(egress));
            this.Write("> observer,\r\n        QueryContainer container)\r\n        : base(observer, containe" +
                    "r)\r\n    { }\r\n\r\n    public override void OnNext(StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(inputKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> batch)\r\n    {\r\n");
  if (!string.IsNullOrEmpty(partitionString))
    { 
            this.Write("        var colkey = batch.key.col;\r\n");
  } 
            this.Write("        var col_bv = batch.bitvector.col;\r\n        var col_vsync = batch.vsync.co" +
                    "l;\r\n        var col_vother = batch.vother.col;\r\n\r\n        for (int i = 0; i < ba" +
                    "tch.Count; i++)\r\n        {\r\n            if ((col_bv[i >> 6] & (1L << (i & 0x3f))" +
                    ") != 0");
 if (ingressType == "StreamEvent") { 
            this.Write(" && col_vother[i] >= 0");
 } 
            this.Write(")\r\n                    continue;\r\n");
 if (ingressType == "StreamEvent")
    { 
            this.Write("            else if (col_vother[i] == StreamEvent.PunctuationOtherTime)\r\n        " +
                    "    {\r\n                this.observer.OnNext(");
            this.Write(this.ToStringHelper.ToStringWithCulture(partitionString));
            this.Write("StreamEvent.CreatePunctuation<");
            this.Write(this.ToStringHelper.ToStringWithCulture(genericArguments));
            this.Write(">(");
            this.Write(this.ToStringHelper.ToStringWithCulture(partitionKeyArgument));
            this.Write("col_vsync[i]));\r\n                continue;\r\n            }\r\n");
      if (partitionString == "Partitioned")
        { 
            this.Write("            else if (col_vother[i] == PartitionedStreamEvent.LowWatermarkOtherTim" +
                    "e)\r\n            {\r\n                this.observer.OnNext(PartitionedStreamEvent.C" +
                    "reateLowWatermark<TKey, TPayload>(col_vsync[i]));\r\n                continue;\r\n  " +
                    "          }\r\n");
      }
    } 
            this.Write("                 ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(" payload;\r\n");
  if (!isColumnar)
    { 
            this.Write("            payload = batch.payload.col[i];\r\n");
  }
    else
    { 
            this.Write("            var generatedBatch = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(TKeyTPayloadGenericParameters));
            this.Write(") batch;\r\n");
      if (payloadRepresentation.RepresentationFor.CanContainNull())
        { 
            this.Write("            if ((generatedBatch._nullnessvector.col[i >> 6] & (1L << (i & 0x3f)))" +
                    "!=0) { payload = null; goto PayloadAssigned; }\r\n");
      }
        if (payloadRepresentation.noFields)
        { 
            this.Write("            payload = generatedBatch.payload.col[i];\r\n");
      }
        else
        { 
            this.Write("            var innerPayload = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("();\r\n");
          foreach (var f in this.fields)
            { 
            this.Write("            if (generatedBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" != null)\r\n");
              if (f.OptimizeString())
                { 
            this.Write("                innerPayload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(" = generatedBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i];\r\n");
              }
                else
                { 
            this.Write("                innerPayload.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(" = generatedBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col[i];\r\n");
              }
            } 
            this.Write("            payload = innerPayload;\r\n");
      }
        if (payloadRepresentation.RepresentationFor.CanContainNull())
        { 
            this.Write("        PayloadAssigned:\r\n");
      }
    }

    switch (ingressType)
    {
        case "StartEdge": 
            this.Write("            if (col_vother[i] == StreamEvent.InfinitySyncTime)\r\n                t" +
                    "his.observer.OnNext(");
            this.Write(this.ToStringHelper.ToStringWithCulture(startEdgeFunction("col_vsync[i]", "payload")));
            this.Write(");\r\n            else\r\n                throw new StreamProcessingException(\"The qu" +
                    "ery has encountered either an end edge or an interval, while the egress point ex" +
                    "pects only start edges.\");\r\n");
          break;
        case "Interval": 
            this.Write("            this.observer.OnNext(");
            this.Write(this.ToStringHelper.ToStringWithCulture(intervalFunction("col_vsync[i]", "col_vother[i]", "payload")));
            this.Write(");\r\n");
          break;
        default: 
            this.Write("            this.observer.OnNext(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(partitionString));
            this.Write("StreamEvent<");
            this.Write(this.ToStringHelper.ToStringWithCulture(genericArguments));
            this.Write(">(");
            this.Write(this.ToStringHelper.ToStringWithCulture(partitionKeyArgument));
            this.Write("col_vsync[i], col_vother[i], col_vother[i] >= 0 ? batch[i] : default(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(")));\r\n");
          break;
    } 
            this.Write("        }\r\n        batch.Free();\r\n    }\r\n\r\n    public override int CurrentlyBuffe" +
                    "redOutputCount => 0;\r\n\r\n    public override int CurrentlyBufferedInputCount => 0" +
                    ";\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
}
