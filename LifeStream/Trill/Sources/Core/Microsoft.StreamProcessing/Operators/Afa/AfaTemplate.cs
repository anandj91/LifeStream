// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class AfaTemplate : CommonPipeTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("// *********************************************************************\r\n// Copy" +
                    "right (c) Microsoft Corporation.  All rights reserved.\r\n// Licensed under the MI" +
                    "T License\r\n// ******************************************************************" +
                    "***\r\n");
            return this.GenerationEnvironment.ToString();
        }

protected virtual void IfFinalStateProduceOutput(int indent, int node, string insertArgument, string syncTime, string otherTime, string keyValue, string hashValue)
{
    this.PushIndent(new string(' ', indent));
    if (this.isFinal[node])
    {
        if (!this.isSyncTimeSimultaneityFree)
        {

this.Write("int ind = tentativeOutput.Insert(");

this.Write(this.ToStringHelper.ToStringWithCulture(insertArgument));

this.Write(");\r\ntentativeOutput.Values[ind].other = Math.Min(");

this.Write(this.ToStringHelper.ToStringWithCulture(otherTime));

this.Write(" + MaxDuration, StreamEvent.InfinitySyncTime);;\r\ntentativeOutput.Values[ind].key " +
        "= ");

this.Write(this.ToStringHelper.ToStringWithCulture(keyValue));

this.Write(";\r\ntentativeOutput.Values[ind].payload = newReg;\r\n");


        }
        else
        {

this.Write("dest_vsync[iter] = ");

this.Write(this.ToStringHelper.ToStringWithCulture(syncTime));

this.Write(";\r\ndest_vother[iter] = Math.Min(");

this.Write(this.ToStringHelper.ToStringWithCulture(otherTime));

this.Write(" + MaxDuration, StreamEvent.InfinitySyncTime);;\r\n");


            if (this.noPublicResultFields) {

this.Write("batch[iter] = newReg;\r\n");


            }
            else
            {
                foreach (var f in this.resultFields)
                {

this.Write("resultBatch_");

this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));

this.Write("_col[iter] = newReg.");

this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));

this.Write(";\r\n");


                }
            }

this.Write("destkey[iter] = ");

this.Write(this.ToStringHelper.ToStringWithCulture(keyValue));

this.Write(";\r\ndest_hash[iter] = ");

this.Write(this.ToStringHelper.ToStringWithCulture(hashValue));

this.Write(";\r\niter++;\r\n\r\nif (iter == Config.DataBatchSize)\r\n{\r\n    FlushContents();\r\n    res" +
        "ultBatch = batch as ");

this.Write(this.ToStringHelper.ToStringWithCulture(this.resultBatchTypeName));

this.Write(";\r\n    dest_vsync = batch.vsync.col;\r\n    dest_vother = batch.vother.col;\r\n    de" +
        "stkey = batch.key.col;\r\n    dest_hash = batch.hash.col;\r\n}\r\n");


        }
    }
    this.PopIndent();
    return;
}

    }
}
