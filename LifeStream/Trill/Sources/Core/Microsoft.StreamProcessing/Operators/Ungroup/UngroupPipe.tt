<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#define PARALLELMERGE
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

namespace Microsoft.StreamProcessing
{
<# for (int i = 0; i < 2; i++)
{
    var innerKey = i == 0 ? "CompoundGroupKey<TOuterKey, TInnerKey>" : "TInnerKey";
    var outerKey = i == 0 ? "TOuterKey" : "Empty";
    var nestedInfix = i == 0 ? "Nested" : string.Empty;
    var groupDomain = i == 0 ? new [] { 0, 1 } : new [] { 1 };
    foreach (var j in groupDomain) { #>

    [DataContract]
    internal sealed class <#= j == 0 ? "Partitioned" : string.Empty #>Ungroup<#= nestedInfix #>Pipe<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult>
        : Pipe<<#= outerKey #>, TResult>, IStreamObserver<<#= innerKey #>, TInnerResult>
    {
        private readonly MemoryPool<<#= outerKey #>, TResult> outPool;
        private readonly string errorMessages;

        [SchemaSerialization]
        private readonly Expression<Func<TInnerKey, TInnerResult, TResult>> resultSelectorExpr;
        private readonly Func<TInnerKey, TInnerResult, TResult> resultSelector;
<# if (i == 0) { #>
        [SchemaSerialization]
        private readonly Expression<Func<TOuterKey, int>> keyComparer;
        private readonly Func<TOuterKey, int> outerHashCode;
<# } #>

        [Obsolete("Used only by serialization. Do not call directly.")]
        public <#= j == 0 ? "Partitioned" : string.Empty #>Ungroup<#= nestedInfix #>Pipe() { }

        public <#= j == 0 ? "Partitioned" : string.Empty #>Ungroup<#= nestedInfix #>Pipe(
            UngroupStreamable<<#= i == 0 ? "TOuterKey, " : string.Empty #>TInnerKey, TInnerResult, TResult> stream,
            IStreamObserver<<#= outerKey #>, TResult> observer)
            : base(stream, observer)
        {
            this.resultSelectorExpr = stream.ResultSelector;
            this.resultSelector = this.resultSelectorExpr.Compile();
            this.outPool = MemoryManager.GetMemoryPool<<#= outerKey #>, TResult>(stream.Properties.IsColumnar);
            this.errorMessages = stream.ErrorMessages;
<# if (i == 0) { #>
            this.keyComparer = stream.Properties.KeyEqualityComparer.GetGetHashCodeExpr();
            this.outerHashCode = this.keyComparer.Compile();
<# } #>
        }

        public unsafe void OnNext(StreamMessage<<#= innerKey #>, TInnerResult> batch)
        {
            outPool.Get(out StreamMessage<<#= outerKey #>, TResult> tmp);
            tmp.AllocatePayload();
            outPool.GetKey(out tmp.key);
            tmp.hash = batch.hash.MakeWritable(outPool.intPool);
            var count = batch.Count;

            tmp.vsync = batch.vsync;
            tmp.vother = batch.vother;
            tmp.bitvector = batch.bitvector;

            fixed (long* srcbv = batch.bitvector.col)
            fixed (int* desthash = tmp.hash.col)
            {
                var srckey = batch.key.col;
                var destkey = tmp.key.col;

<# if (i == 0) { #>
                for (int i = 0; i < count; i++)
                {
<# if (j == 0) { #>
                    if ((srcbv[i >> 6] & (1L << (i & 0x3f))) != 0)
                    {
                        if (batch.vother.col[i] == long.MinValue)
                        {
                            destkey[i] = srckey[i].outerGroup;
                            desthash[i] = batch.hash.col[i];
                            tmp.bitvector.col[i >> 6] |= 1L << (i & 0x3f);
                        }
                        continue;
                    }
<# } else { #>
                    if ((srcbv[i >> 6] & (1L << (i & 0x3f))) != 0) continue;
<# } #>
                    destkey[i] = srckey[i].outerGroup;
                    tmp[i] = resultSelector(srckey[i].innerGroup, batch[i]);
                    desthash[i] = this.outerHashCode(destkey[i]);
                }
<# } else { #>
                Array.Clear(tmp.hash.col, 0, count);

                var unit = Empty.Default;

                for (int i = 0; i < count; i++)
                {
                    if ((srcbv[i >> 6] & (1L << (i & 0x3f))) != 0) continue;
                    destkey[i] = unit;
                    tmp[i] = resultSelector(srckey[i], batch[i]);
                }
<# } #>
            }

            tmp.Count = count;
            tmp.Seal();

            Observer.OnNext(tmp);

            batch.ReleasePayload();
            batch.key.Return();
            batch.Return();
        }

        public override void ProduceQueryPlan(PlanNode previous)
            => Observer.ProduceQueryPlan(new UngroupPlanNode(
                previous,
                this,
                typeof(<#= innerKey #>),
                typeof(<#= outerKey #>),
                typeof(TInnerResult),
                typeof(TResult),
                resultSelectorExpr,
                false,
                errorMessages));

        public override int CurrentlyBufferedOutputCount => 0;

        public override int CurrentlyBufferedInputCount => 0;
    }
<# } #>
<# } #>
}