<#@ template language="C#" inherits="AggregateTemplate" visibility="internal" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\..\..\Aggregates\AggregateCommon.txt" #>
/// <summary>
/// Operator that uses a full-fledged priority queue as ECQ
/// </summary>
[DataContract]
internal sealed class <#= className #><#= genericParameters #> : UnaryPipe<<#= TKey #>, <#= TInput #>, <#= TOutput #>>
{
    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator;
    private readonly IAggregate<<#= TInput #>, <#= TState #>, <#= TOutput #>> aggregate;

    [DataContract]
    class EcqState
    {
        [DataMember]
        public long timestamp;
        [DataMember]
        public FastDictionary<<#= TKey #>, StateAndActive> states;
    }

    <#= Transformer.GetMemoryPoolClassName(this.keyType, this.outputType) #><#= genericParameters2 #> pool;

    private StreamMessage<<#= TKey #>, <#= TOutput #>> genericOutputbatch;
    [DataMember]
    private <#= Transformer.GetBatchClassName(keyType, outputType) #><#= TKeyTOutputGenericParameters #> batch;

<# if (this.useCompiledInitialState) { #>
    private readonly Func<<#= TState #>> initialState;
<# } #>
<# if (this.useCompiledAccumulate) { #>
    private readonly Func<<#= TState #>, long, <#= TInput #>, <#= TState #>> accumulate;
<# } #>
<# if (this.useCompiledDeaccumulate) { #>
    private readonly Func<<#= TState #>, long, <#= TInput #>, <#= TState #>> deaccumulate;
<# } #>
<# if (this.useCompiledDifference) { #>
    private readonly Func<<#= TState #>, <#= TState #>, <#= TState #>> difference;
<# } #>
<# if (this.useCompiledComputeResult) { #>
    private readonly Func<<#= TState #>, <#= TOutput #>> computeResult;
<# } #>

    private readonly IEqualityComparerExpression<<#= TKey #>> keyComparer;
    private readonly Func<<#= TKey #>, <#= TKey #>, bool> keyComparerEquals;
    private readonly Func<<#= TKey #>, int> keyComparerGetHashCode;

    [DataMember]
    private FastDictionary2<<#= TKey #>, HeldState> aggregateByKey;
    [DataMember]
    private FastDictionary<<#= TKey #>, HeldState> heldAggregates;
    [DataMember]
    private SortedDictionary<long, EcqState> ecq;
    [DataMember]
    private long lastSyncTime = long.MinValue;

    private HeldState currentState;
    private <#= TKey #> currentKey;
    private int currentHash;

    private Func<FastDictionary<<#= TKey #>, StateAndActive>> stateDictGenerator;

    <#= staticCtor #>

    public <#= className #>() { }

    public <#= className #>(
        Streamable<<#= TKey #>, <#= TOutput #>> stream,
        IStreamObserver<<#= TKey #>, <#= TOutput #>> observer,
        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator,
        IAggregate<<#= TInput #>, <#= TState #>, <#= TOutput #>> aggregate)
        : base(stream, observer)
    {
        this.aggregate = aggregate;
        this.queryPlanGenerator = queryPlanGenerator;
<# if (this.useCompiledInitialState) { #>
        initialState = aggregate.InitialState().Compile();
<# } #>
<# if (this.useCompiledAccumulate) { #>
        accumulate = aggregate.Accumulate().Compile();
<# } #>
<# if (this.useCompiledDeaccumulate) { #>
        deaccumulate = aggregate.Deaccumulate().Compile();
<# } #>
<# if (this.useCompiledDifference) { #>
        difference = aggregate.Difference().Compile();
<# } #>
<# if (this.useCompiledComputeResult) { #>
        computeResult = aggregate.ComputeResult().Compile();
<# } #>

        this.keyComparer = stream.Properties.KeyEqualityComparer;
        this.keyComparerEquals = this.keyComparer.GetEqualsExpr().Compile();
        this.keyComparerGetHashCode = this.keyComparer.GetGetHashCodeExpr().Compile();

        this.stateDictGenerator = this.keyComparer.CreateFastDictionaryGenerator<<#= TKey #>, StateAndActive>(1, this.keyComparerEquals, this.keyComparerGetHashCode, stream.Properties.QueryContainer);

        this.pool = MemoryManager.GetMemoryPool<<#= TKey #>, <#= TOutput #>>() as <#= Transformer.GetMemoryPoolClassName(this.keyType, this.outputType) #><#= genericParameters2 #>;
        <#= getOutputBatch #>
        this.batch.Allocate();

        this.aggregateByKey = this.keyComparer.CreateFastDictionary2Generator<<#= TKey #>, HeldState>(1, this.keyComparerEquals, this.keyComparerGetHashCode, stream.Properties.QueryContainer).Invoke();
        this.heldAggregates = this.keyComparer.CreateFastDictionaryGenerator<<#= TKey #>, HeldState>(1, this.keyComparerEquals, this.keyComparerGetHashCode, stream.Properties.QueryContainer).Invoke();

        this.ecq = new SortedDictionary<long, EcqState>();
    }

    public override void ProduceQueryPlan(PlanNode previous)
        => Observer.ProduceQueryPlan(queryPlanGenerator(previous, this));

    protected override void FlushContents()
    {
        if (this.batch == null || this.batch.Count == 0) return;
        this.batch.Seal();
        this.Observer.OnNext(this.batch);
        <#= getOutputBatch #>
        this.batch.Allocate();
    }

    protected override void DisposeState() => this.batch.Free();

    public override int CurrentlyBufferedOutputCount => this.batch.Count;

    public override int CurrentlyBufferedInputCount => this.aggregateByKey.Count + this.ecq.Values.Select(o => o.states.Count).Sum();

    public override unsafe void OnNext(StreamMessage<<#= TKey #>, <#= TInput #>> inputBatch)
    {
        <#= BatchGeneratedFrom_TKey_TInput #><#= TKeyTInputGenericParameters #> generatedBatch = inputBatch as <#= BatchGeneratedFrom_TKey_TInput #><#= TKeyTInputGenericParameters #>;

        this.batch.iter = generatedBatch.iter;

        var count = generatedBatch.Count;

<# if (this.outputFields.Count() > 1) { #>
        <#= TOutput #> temporaryOutput;
<# } #>

        // Create locals that point directly to the arrays within the columns in the input batch.
<# foreach (var f in this.inputFields) { #>
<# if (f.canBeFixed) { #>
        fixed (<#= f.TypeName #>* <#= f.Name #>_col = generatedBatch.<#= f.Name #>.col)
        {
<# } else { #>
        var <#= f.Name #>_col = generatedBatch.<#= f.Name #>.col;
<# } #>
<# } #>

        // Create locals that point directly to the arrays within the columns in the output batch.
<# foreach (var f in this.outputFields) { #>
<# if (f.canBeFixed) { #>
        fixed (<#= f.TypeName #>* dest_<#= f.Name #> = this.batch.<#= f.Name #>.col)
        {
<# } else { #>
        var dest_<#= f.Name #> = this.batch.<#= f.Name #>.col;
<# } #>
<# } #>

        fixed (long* col_vsync = generatedBatch.vsync.col)
        fixed (long* col_vother = generatedBatch.vother.col)
        fixed (int* col_hash = generatedBatch.hash.col)
        fixed (long* col_bv = generatedBatch.bitvector.col)
        for (int i = 0; i < count; i++)
        {
            if ((col_bv[i >> 6] & (1L << (i & 0x3f))) != 0)
            {
                if (col_vother[i] == long.MinValue)
                {
                    // We have found a row that corresponds to punctuation
                    OnPunctuation(col_vsync[i]);

                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = col_vsync[i];
                    this.batch.vother.col[c] = long.MinValue;
                    this.batch.key.col[c] = default;
                    this.batch[c] = default;
                    this.batch.hash.col[c] = 0;
                    this.batch.bitvector.col[c >> 6] |= 1L << (c & 0x3f);
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                }
                continue;
            }

            var syncTime = col_vsync[i];
            var key_i = generatedBatch.key.col[i];

            HeldState heldState;
            bool cachedState = false;

            // Handle time moving forward
            if (syncTime > this.lastSyncTime)
            {
                /* Issue start edges for held aggregates */
                if (currentState != null && this.heldAggregates.Count == 1)
                {
                    // there is just one held aggregate, and currentState is set
                    // so currentState has to be the held aggregate
                    cachedState = true;

                    if (currentState.state.active > 0)
                    {
                        int c = this.batch.Count;
                        this.batch.vsync.col[c] = currentState.timestamp;
                        this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                        <#= assignToOutput(computeResult("currentState.state.state")) #>
                        this.batch.key.col[c] = currentKey;
                        this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("currentKey") #>;
                        this.batch.Count++;
                        if (this.batch.Count == Config.DataBatchSize)
                        {
                            this.batch.iter = generatedBatch.iter;
                            FlushContents();
                            this.batch.iter = generatedBatch.iter;
                        }
                    }
                    else
                    {
                        this.aggregateByKey.Remove(currentKey, currentHash);
                        currentState = null;
                    }
                }
                else
                {
                    int iter1 = FastDictionary<<#= TKey #>, HeldState>.IteratorStart;
                    while (this.heldAggregates.Iterate(ref iter1))
                    {
                        var iter1entry = this.heldAggregates.entries[iter1];

                        if (iter1entry.value.state.active > 0)
                        {
                            int c = this.batch.Count;
                            this.batch.vsync.col[c] = iter1entry.value.timestamp;
                            this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                            <#= assignToOutput(computeResult("iter1entry.value.state.state")) #>
                            this.batch.key.col[c] = iter1entry.key;
                            this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("iter1entry.key") #>;
                            this.batch.Count++;
                            if (this.batch.Count == Config.DataBatchSize) FlushContents();
                        }
                        else
                        {
                            this.aggregateByKey.Remove(iter1entry.key); // ,  (currentKey, currentHash);
                            currentState = null;
                        }
                    }

                    // Time has moved forward, clear the held aggregates
                    this.heldAggregates.Clear();
                    currentState = null;
                }

                /* Process the ECQ up until the new sync time */
                long ve;
                EcqState ecqState;
                while (this.ecq.Count > 0 && this.ecq.TryGetFirst(out ve, out ecqState) && ve <= syncTime)
                {
                    this.ecq.Remove(ve);
                    int iter = FastDictionary<<#= TKey #>, <#= TState #>>.IteratorStart;

                    while (ecqState.states.Iterate(ref iter))
                    {
                        if (currentState == null || !<#= inlinedKeyComparerEquals("currentKey", "ecqState.states.entries[iter].key") #>)
                        {
                            int index;
                            this.aggregateByKey.Lookup(ecqState.states.entries[iter].key, out index);
                            heldState = this.aggregateByKey.entries[index].value;
                        }
                        else
                            heldState = currentState;

                        if (heldState.state.active > 0)
                        {
                            // Issue end edge
                            int c = this.batch.Count;
                            this.batch.vsync.col[c] = ecqState.timestamp;
                            this.batch.vother.col[c] = heldState.timestamp;
                            <#= assignToOutput(computeResult("heldState.state.state")) #>
                            this.batch.key.col[c] = ecqState.states.entries[iter].key;
                            this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("ecqState.states.entries[iter].key") #>;
                            this.batch.Count++;
                            if (this.batch.Count == Config.DataBatchSize) FlushContents();
                        }

                        // Update aggregate
                        heldState.state.state = <#= difference("heldState.state.state", "ecqState.states.entries[iter].value.state") #>;
                        heldState.state.active -= ecqState.states.entries[iter].value.active;

                        if (ecqState.timestamp < syncTime)
                        {
                            if (heldState.state.active > 0)
                            {
                                // Issue start edge
                                int c = this.batch.Count;
                                this.batch.vsync.col[c] = ecqState.timestamp;
                                this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                                <#= assignToOutput(computeResult("heldState.state.state")) #>
                                this.batch.key.col[c] = ecqState.states.entries[iter].key;
                                this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("ecqState.states.entries[iter].key") #>;
                                this.batch.Count++;
                                if (this.batch.Count == Config.DataBatchSize) FlushContents();
                            }
                            else
                            {
                                // remove from aggregateByKey
                                this.aggregateByKey.Remove(ecqState.states.entries[iter].key);
                                currentState = null;
                            }
                        }
                        else
                        {
                            if (cachedState)
                            {
                                cachedState = false;
                                if (heldState != currentState)
                                {
                                    this.heldAggregates.Clear();
                                    currentState = null;
                                    int index;
                                    this.heldAggregates.Lookup(ecqState.states.entries[iter].key, out index);
                                    this.heldAggregates.Insert(ref index, ecqState.states.entries[iter].key, heldState);
                                }
                            }
                            else
                            {
                                int index;
                                this.heldAggregates.Lookup(ecqState.states.entries[iter].key, out index);
                                this.heldAggregates.Insert(ref index, ecqState.states.entries[iter].key, heldState);
                            }
                        }

                        // Update timestamp
                        heldState.timestamp = ecqState.timestamp;
                    }
                }

                // Since sync time changed, set this.lastSyncTime
                this.lastSyncTime = syncTime;
            }

            if (currentState == null || currentHash != col_hash[i] || !<#= inlinedKeyComparerEquals("currentKey", "key_i") #>)
            {
                if (cachedState)
                {
                    cachedState = false;
                    this.heldAggregates.Clear();
                }

                // Need to retrieve the key from the dictionary
                currentKey = key_i;
                currentHash = col_hash[i];

                int index;
                if (!this.heldAggregates.Lookup(currentKey, currentHash, out index))
                {
                    // First time group is active for this time
                    int aggindex;
                    if (!this.aggregateByKey.Lookup(currentKey, currentHash, out aggindex))
                    {
                        // New group. Create new state
                        currentState = new HeldState();
                        currentState.state.state = <#= initialState #>;
                        currentState.timestamp = syncTime;
                        this.aggregateByKey.Insert(currentKey, currentState, currentHash);

                        // No output because initial state is empty
                    }
                    else
                    {
                        currentState = this.aggregateByKey.entries[aggindex].value;
                        if (syncTime > currentState.timestamp)
                        {
                            if (currentState.state.active > 0)
                            {
                                // Output end edge
                                int c = this.batch.Count;
                                this.batch.vsync.col[c] = syncTime;
                                this.batch.vother.col[c] = currentState.timestamp;
                                <#= assignToOutput(computeResult("currentState.state.state")) #>
                                this.batch.key.col[c] = currentKey;
                                this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("currentKey") #>;
                                this.batch.Count++;
                                if (this.batch.Count == Config.DataBatchSize) FlushContents();
                            }
                            currentState.timestamp = syncTime;
                        }
                    }
                    this.heldAggregates.Insert(ref index, currentKey, currentState);
                }
                else
                {
                    // read new currentState from _heldAgg index
                    currentState = this.heldAggregates.entries[index].value;
                }
            }
            else
            {
                if (syncTime > currentState.timestamp)
                {
                    if (currentState.state.active > 0)
                    {
                        // Output end edge
                        int c = this.batch.Count;
                        this.batch.vsync.col[c] = syncTime;
                        this.batch.vother.col[c] = currentState.timestamp;
                        <#= assignToOutput(computeResult("currentState.state.state")) #>
                        this.batch.key.col[c] = currentKey;
                        this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("currentKey") #>;
                        this.batch.Count++;
                        if (this.batch.Count == Config.DataBatchSize) FlushContents();
                    }
                    currentState.timestamp = syncTime;
                }
            }

            if (col_vsync[i] < col_vother[i]) // insert event
            {
                currentState.state.state = <#= accumulate("currentState.state.state", "col_vsync[i]" /*, "col_payload[i]"*/) #>;
                currentState.state.active++;

                // Update ECQ
                if (col_vother[i] < StreamEvent.InfinitySyncTime)
                {
                    EcqState eState;
                    int index;
                    if (this.ecq.Count > 0)
                    {
                        if (!this.ecq.TryGetValue(col_vother[i], out eState))
                        {
                            eState = new EcqState();
                            eState.timestamp = col_vother[i];
                            eState.states = this.stateDictGenerator.Invoke();
                            eState.states.Lookup(key_i, col_hash[i], out index);
                            eState.states.Insert(ref index, key_i, new StateAndActive { state = <#= initialState #> });
                            this.ecq.Add(col_vother[i], eState);
                        }
                        else
                        {
                            if (!eState.states.Lookup(key_i, col_hash[i], out index))
                            {
                                eState.states.Insert(ref index, key_i, new StateAndActive { state = <#= initialState #> });
                            }
                        }
                    }
                    else
                    {
                        eState = new EcqState();
                        eState.timestamp = col_vother[i];
                        eState.states = this.stateDictGenerator.Invoke();
                        eState.states.Lookup(key_i, col_hash[i], out index);
                        eState.states.Insert(ref index, key_i, new StateAndActive { state = <#= initialState #> });
                        this.ecq.Add(col_vother[i], eState);
                    }

                    eState.states.entries[index].value.state = <#= accumulate("eState.states.entries[index].value.state", "col_vsync[i]") #>;
                    eState.states.entries[index].value.active++;
                }
            }
            else // is a retraction
            {
                currentState.state.state = <#= deaccumulate("currentState.state.state", "col_vsync[i]"/*, "col_payload[i]"*/) #>;
                currentState.state.active--;
            }
        }

<# foreach (var f in this.inputFields.Where(fld => fld.canBeFixed)) { #>
        }
<# } #>
<# foreach (var f in this.outputFields.Where(fld => fld.canBeFixed)) { #>
        }
<# } #>

        generatedBatch.Release();
        generatedBatch.Return();
    }


    public void OnPunctuation(long syncTime)
    {
        HeldState heldState;

<# if (this.outputFields.Count() > 1) { #>
        <#= TOutput #> temporaryOutput;
<# foreach (var f in this.outputFields) { #>
        var dest_<#= f.Name #> = this.batch.<#= f.Name #>.col;
<# } #>
<# } #>

        // Handle time moving forward
        if (syncTime > this.lastSyncTime)
        {
            /* Issue start edges for held aggregates */
            if (currentState != null && this.heldAggregates.Count == 1)
            {
                // there is just one held aggregate, and currentState is set
                // so currentState has to be the held aggregate
                if (currentState.state.active > 0)
                {
                    int c = this.batch.Count;
                    this.batch.vsync.col[c] = currentState.timestamp;
                    this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                    <#= assignToOutput(computeResult("currentState.state.state")) #>
                    this.batch.key.col[c] = currentKey;
                    this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("currentKey") #>;
                    this.batch.Count++;
                    if (this.batch.Count == Config.DataBatchSize) FlushContents();
                }
                else
                {
                    this.aggregateByKey.Remove(currentKey, currentHash);
                    currentState = null;
                }
            }
            else
            {
                int iter1 = FastDictionary<<#= TKey #>, HeldState>.IteratorStart;
                while (this.heldAggregates.Iterate(ref iter1))
                {
                    var iter1entry = this.heldAggregates.entries[iter1];

                    if (iter1entry.value.state.active > 0)
                    {
                        int c = this.batch.Count;
                        this.batch.vsync.col[c] = iter1entry.value.timestamp;
                        this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                        <#= assignToOutput(computeResult("iter1entry.value.state.state")) #>
                        this.batch.key.col[c] = iter1entry.key;
                        this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("iter1entry.key") #>;
                        this.batch.Count++;
                        if (this.batch.Count == Config.DataBatchSize) FlushContents();
                    }
                    else
                    {
                        this.aggregateByKey.Remove(iter1entry.key);
                        currentState = null;
                    }
                }
            }

            // Time has moved forward, clear the held aggregates
            this.heldAggregates.Clear();
            currentState = null;

            /* Process the ECQ up until the new sync time */
            long ve;
            EcqState ecqState;
            while (this.ecq.Count > 0 && this.ecq.TryGetFirst(out ve, out ecqState) && ve <= syncTime)
            {
                this.ecq.Remove(ve);
                int iter = FastDictionary<<#= TKey #>, <#= TState #>>.IteratorStart;

                while (ecqState.states.Iterate(ref iter))
                {
                    if (currentState == null || !<#= inlinedKeyComparerEquals("currentKey", "ecqState.states.entries[iter].key") #>)
                    {
                        int index;
                        this.aggregateByKey.Lookup(ecqState.states.entries[iter].key, out index);
                        heldState = this.aggregateByKey.entries[index].value;
                    }
                    else
                        heldState = currentState;

                    if (heldState.state.active > 0)
                    {
                        // Issue end edge
                        int c = this.batch.Count;
                        this.batch.vsync.col[c] = ecqState.timestamp;
                        this.batch.vother.col[c] = heldState.timestamp;
                        <#= assignToOutput(computeResult("heldState.state.state")) #>
                        this.batch.key.col[c] = ecqState.states.entries[iter].key;
                        this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("ecqState.states.entries[iter].key") #>;
                        this.batch.Count++;
                        if (this.batch.Count == Config.DataBatchSize) FlushContents();
                    }

                    // Update aggregate
                    heldState.state.state = <#= difference("heldState.state.state", "ecqState.states.entries[iter].value.state") #>;
                    heldState.state.active -= ecqState.states.entries[iter].value.active;

                    if (ecqState.timestamp < syncTime)
                    {
                        if (heldState.state.active > 0)
                        {
                            // Issue start edge
                            int c = this.batch.Count;
                            this.batch.vsync.col[c] = ecqState.timestamp;
                            this.batch.vother.col[c] = StreamEvent.InfinitySyncTime;
                            <#= assignToOutput(computeResult("heldState.state.state")) #>
                            this.batch.key.col[c] = ecqState.states.entries[iter].key;
                            this.batch.hash.col[c] = <#= inlinedKeyComparerGetHashCode("ecqState.states.entries[iter].key") #>;
                            this.batch.Count++;
                            if (this.batch.Count == Config.DataBatchSize) FlushContents();
                        }
                        else
                        {
                            // remove from aggregateByKey
                            this.aggregateByKey.Remove(ecqState.states.entries[iter].key);
                            currentState = null;
                        }
                    }
                    else
                    {
                        int index;
                        this.heldAggregates.Lookup(ecqState.states.entries[iter].key, out index);
                        this.heldAggregates.Insert(ref index, ecqState.states.entries[iter].key, heldState);
                    }

                    // Update timestamp
                    heldState.timestamp = ecqState.timestamp;
                }
            }

            // Since sync time changed, set this.lastSyncTime
            this.lastSyncTime = syncTime;
        }
    }

    protected override void UpdatePointers()
    {
        int iter1 = FastDictionary<<#= TKey #>, HeldState>.IteratorStart;
        while (this.heldAggregates.Iterate(ref iter1))
        {
            int iter2;
            <#= TKey #> key = this.heldAggregates.entries[iter1].key;
            bool found = this.aggregateByKey.Lookup(key, out iter2);
            if (!found) throw new InvalidOperationException();
            this.heldAggregates.entries[iter1].value = this.aggregateByKey.entries[iter2].value;
        }
    }
}
