// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.StreamProcessing
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class RowToColumnTemplate : CommonUnaryTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Expressions;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization;
using Microsoft.StreamProcessing;
using Microsoft.StreamProcessing.Internal;
using Microsoft.StreamProcessing.Internal.Collections;

");
 if (this.keyType.Namespace != null) { 
            this.Write("using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.keyType.Namespace));
            this.Write(";\r\n");
 } 
 if (this.payloadType.Namespace != null) { 
            this.Write("using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.payloadType.Namespace));
            this.Write(";\r\n");
 } 
            this.Write("\r\n");

  string TKey;
  var genericTypeNames = new string[]{"A", "B"};
  if (keyType.IsAnonymousType())
  {
    TKey = genericTypeNames[0];
  }
  else
  {
    genericTypeNames[0] = string.Empty;
    TKey = keyType.GetCSharpSourceSyntax();
  }

  string TPayload;
  var payloadIsAnon = false;
  if (payloadType.IsAnonymousType())
  {
    TPayload = genericTypeNames[1];
    payloadIsAnon = true;
  }
  else
  {
    genericTypeNames[1] = string.Empty;
    TPayload = payloadType.GetCSharpSourceSyntax();
  }

  var genericParameters = Transformer.GenericParameterList(genericTypeNames);

  var genericParameters2 = $"<{TKey}, {TPayload}>";
  if (payloadType == typeof(int) || payloadType == typeof(long) || payloadType == typeof(string)) genericParameters2 = string.Empty;

            this.Write("\r\n[DataContract]\r\ninternal sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            this.Write(" : UnaryPipe<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(">\r\n{\r\n    private readonly Func<PlanNode, IQueryObject, PlanNode> queryPlanGenera" +
                    "tor;\r\n    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(this.keyType, this.payloadType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters2));
            this.Write(" pool;\r\n\r\n");

    if (payloadIsAnon) {
        foreach (var f in this.fields) {

            this.Write("    private PropertyInfo ");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_Property = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(").GetProperty(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write("\");\r\n");

        }
    }

            this.Write("\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("() { }\r\n\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            this.Write("(\r\n        IStreamable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> stream,\r\n        IStreamObserver<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> observer,\r\n        Func<PlanNode, IQueryObject, PlanNode> queryPlanGenerator)\r\n" +
                    "        : base(stream, observer)\r\n    {\r\n        this.pool = MemoryManager.GetMe" +
                    "moryPool<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write(">(true) as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Transformer.GetMemoryPoolClassName(this.keyType, this.payloadType)));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters2));
            this.Write(@";
        this.queryPlanGenerator = queryPlanGenerator;
    }

    public override void ProduceQueryPlan(PlanNode previous)
    {
        Observer.ProduceQueryPlan(this.queryPlanGenerator(previous, this));
    }

    protected override void FlushContents() { }

    public override unsafe void OnNext(StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> batch)\r\n    {\r\n        StreamMessage<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TKey));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("> resultBatchUncast; // Need this type to call Get with so the right subtype will" +
                    " be returned\r\n        this.pool.Get(out resultBatchUncast);\r\n\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            this.Write(" resultBatch = resultBatchUncast as ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BatchGeneratedFrom_TKey_TPayload));
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            this.Write(";\r\n\r\n        resultBatch.CloneFromNoPayload(batch);\r\n\r\n        // Get memory pool" +
                    "s for the payload columns.\r\n\r\n");
 foreach (var f in this.fields) { 
            this.Write("\r\n        this.pool.Get(out resultBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(");\r\n");
 } 
 if (this.payloadType.CanContainNull()) { 
            this.Write("        this.pool.GetBV(out resultBatch._nullnessvector);\r\n");
 } 
            this.Write("\r\n        var count = batch.Count;\r\n\r\n");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
 if (f.canBeFixed) { 
            this.Write("\r\n        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type.Name));
            this.Write("* dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = resultBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col)\r\n        {\r\n");
 } else { 
            this.Write("\r\n        var dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(" = resultBatch.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write(".col;\r\n\r\n");
 } 
 } 
            this.Write("\r\n        fixed (long* bv = batch.bitvector.col)\r\n        {\r\n");
 if (this.payloadType.CanBeFixed()) { 
            this.Write("        fixed (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TPayload));
            this.Write("* srcpayload = batch.payload.col)\r\n        {\r\n");
 } else { 
            this.Write("\r\n        var srcpayload = batch.payload.col;\r\n\r\n");
 } 
            this.Write("\r\n");
 if (this.rowMajor) { 
            this.Write("            for (int i = 0; i < count; i++)\r\n            {\r\n                if ((" +
                    "bv[i >> 6] & (1L << (i & 0x3f)))==0)\r\n                {\r\n");
 foreach (var f in this.fields) { 
            this.Write("\r\n");
   if (payloadIsAnon) { 
            this.Write("                    dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_Property.GetValue(srcpayload[i], null);\r\n");
   }  else { 
            this.Write("                    dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i] = srcpayload[i].");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 
 } 
            this.Write("                }\r\n            }\r\n");
 } else { 
            this.Write("\r\n");
 foreach (var f in this.fields) { 
            this.Write("\r\n                    for (int i = 0; i < count; i++)\r\n                    {\r\n   " +
                    "                     if ((bv[i >> 6] & (1L << (i & 0x3f)))==0)\r\n                " +
                    "        {\r\n");
   if (payloadIsAnon) { 
            this.Write("                            dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i] = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Type));
            this.Write(") this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("_Property.GetValue(srcpayload[i], null);\r\n");
   }  else { 
            this.Write("                            dest_");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.Name));
            this.Write("[i] = srcpayload[i].");
            this.Write(this.ToStringHelper.ToStringWithCulture(f.OriginalName));
            this.Write(";\r\n");
 } 
            this.Write("                        }\r\n                    }\r\n");
 } 
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 if (this.payloadType.CanBeFixed()) { 
            this.Write("        }\r\n");
 } 
            this.Write("        }\r\n\r\n");
 foreach (var f in this.fields.Where(fld => fld.canBeFixed)) { 
            this.Write("\r\n        }\r\n");
 } 
            this.Write(@"
        resultBatch.Count = count;
        resultBatch.Seal();
        this.Observer.OnNext(resultBatch);

        batch.Release();
        batch.Return();
    }

    public override int CurrentlyBufferedOutputCount => 0;

    public override int CurrentlyBufferedInputCount => 0;
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
}
