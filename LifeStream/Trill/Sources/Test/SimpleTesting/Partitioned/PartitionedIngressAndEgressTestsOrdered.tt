<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using Microsoft.StreamProcessing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SimpleTesting.PartitionedIngressAndEgress;

namespace SimpleTesting.PartitionedIngressAndEgressOrdered
{<#
foreach (var orientation in new [] { "Row", "Columnar" })
foreach (var batch in new [] { string.Empty, "SmallBatch" })
foreach (var punctuationPolicy in new [] { "None", "Time" })
foreach (var lowWatermark in new [] { "None", "Time" })
foreach (var lowWatermarkPeriod in new [] { 0, 5, 10, 500 })
foreach (var lowWatermarkLag in new [] { 0, 5, 10, 500 })
foreach (var reorderLatency in new [] { 0, 10, 1000 }) // Different reorderLatency values to have overlapping or non overlapping intervals
{
    if (lowWatermark == "None" && (lowWatermarkPeriod != 0 || lowWatermarkLag != 0))
    {
        continue;
    }

    var punctuationSuffix = "Punctuation" + (punctuationPolicy == "None" ? "None" : "10");
    var lowWatermarkSuffix = "LowWatermark" + (lowWatermark == "None" ? "None" : lowWatermarkPeriod + "_" + lowWatermarkLag);
    var suffix = orientation + batch + reorderLatency + punctuationSuffix + lowWatermarkSuffix;

    var punctuationPolicyConstructor = punctuationPolicy == "None" ? "None()" : "Time(10)";
    var lowWatermarkPolicyConstructor = punctuationPolicy == "None" ? "None()" : "Time(" + lowWatermarkPeriod + ", " + lowWatermarkLag + ")";
#>

    [TestClass]
    public class TriPartitionedOrderedTests<#= suffix #> : TriPartitionedOrderedTestsBase
    {
        public TriPartitionedOrderedTests<#= suffix #>() : base(
            baseConfigModifier.ForceRowBasedExecution(<#= orientation == "Row" ? "true" : "false" #>)<#
    if (!string.IsNullOrEmpty(batch))
    {
                        #>.DataBatchSize(100)<#
    } #>,
            DisorderPolicy.Throw(<#= reorderLatency #>),
            PeriodicPunctuationPolicy.<#= punctuationPolicyConstructor #>,
            PeriodicLowWatermarkPolicy.<#= lowWatermarkPolicyConstructor #>) { }
    }
<#
} #>
}