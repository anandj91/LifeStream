<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ output extension=".cs" #>
// *********************************************************************
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License
// *********************************************************************
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using Microsoft.StreamProcessing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SimpleTesting
{
<#
foreach (var orientation in new [] { "Row", "Columnar" })
foreach (var batch in new [] { string.Empty, "SmallBatch" })
foreach (var disorder in new [] {string.Empty, "Drop", "Throw", "Adjust"})
foreach (var punctuationpolicy in new [] {string.Empty, "Time"})
foreach (var lag in new [] {0, 10, 1000}) //different lag values to have overlapping or non overlapping intervals
{
    // no need for different latency values if disoder is none.
    if(disorder == String.Empty && lag > 0) continue;

    var suffix = orientation + batch + disorder + (lag <= 0  ? String.Empty : lag.ToString()) + punctuationpolicy;
#>

    [TestClass]
    public class IngressAndEgressTests<#= suffix #> : TestWithConfigSettingsAndMemoryLeakDetection
    {
        public IngressAndEgressTests<#= suffix #>() : base(new ConfigModifier()
<#  switch (orientation)
{
    case "Row": #>
            .ForceRowBasedExecution(true)
            .DontFallBackToRowBasedExecution(true)
<#          break;
    case "Columnar": #>
            .ForceRowBasedExecution(false)
            .DontFallBackToRowBasedExecution(true)
<#          break;
} #>
<# if (!string.IsNullOrEmpty(batch)) { #>
            .DataBatchSize(100)
<# } #>
            .UseMultiString(true)
            .MultiStringTransforms(Config.CodegenOptions.MultiStringFlags.Wrappers | Config.CodegenOptions.MultiStringFlags.VectorOperations))
        { }
<#  if (disorder == String.Empty && punctuationpolicy == String.Empty)
    { #>

        [TestMethod, TestCategory("Gated")]
        public void Level1InLevel1OutTrivial<#= suffix #>()
        {
            var input = Enumerable.Range(0, 1000).ToList();
            var subject = new Subject<int>();
            var prog = subject.ToAtemporalStreamable(TimelinePolicy.Sequence(100)).ToEnumerable();
            input.ForEach(o => subject.OnNext(o));
            subject.OnCompleted();
            while (!prog.Completed) { }
            var output = prog.OrderBy(o => o);

            Assert.IsTrue(output.SequenceEqual(input));
        }

        [TestMethod, TestCategory("Gated")]
        public void Level1InLevel3OutTrivial<#= suffix #>()
        {
            var input = Enumerable.Range(0, 1000).ToList();
            var subject = new Subject<int>();
            var output = new List<StreamEvent<int>>();

            var outputAwait = subject.ToAtemporalStreamable(TimelinePolicy.Sequence(100)).ToStreamEventObservable().Where(o => o.IsData).ForEachAsync(o => output.Add(o));
            input.ForEach(o => subject.OnNext(o));
            subject.OnCompleted();
            outputAwait.Wait();

            Assert.IsTrue(output.Select(o => o.Payload).SequenceEqual(input));
            Assert.IsTrue(output.All(o => o.EndTime == StreamEvent.InfinitySyncTime));
        }
<#  }  #>

        [TestMethod, TestCategory("Gated")]
        public void StartEdgeTest<#= suffix #>()
        {
            var input = Enumerable.Range(1, 1000).ToList();

            var prog = input.ToObservable().ToTemporalStreamable(
                o => (long)o,
<# switch (disorder)
        {
case "Drop": #>
                DisorderPolicy.Drop(<#= lag #>),
<#  break;
case "Throw": #>
                DisorderPolicy.Throw(<#= lag #>),
<#   break;
case "Adjust": #>
                DisorderPolicy.Adjust(<#= lag #>),
<# break;
default: #>
                null,
<#   break;
        } #>
                FlushPolicy.FlushOnPunctuation,
<# switch (punctuationpolicy)
        {
case "Time": #>
                PeriodicPunctuationPolicy.Time(10)<#
    break;
default: #>
                null<#
    break;
        } #>).ToStreamEventObservable();

            var outevents = prog.ToEnumerable().ToList();
            var output = outevents.Where(o => !o.IsPunctuation);
            var punctuations = outevents.Where(o => o.IsPunctuation && o.SyncTime != StreamEvent.InfinitySyncTime);
<#  if (punctuationpolicy == "Time")
    { #>
            Assert.IsTrue(punctuations.SequenceEqual(input.Where(i => i % 10 == 0).Select(i => StreamEvent.CreatePunctuation<int>((long)i))));
<#  } #>
            Assert.IsTrue(output.SequenceEqual(input.Select(i => StreamEvent.CreateStart(i, i))));
        }

        [TestMethod, TestCategory("Gated")]
        public void IntervalIngressTest<#= suffix #>()
        {
            var input = Enumerable.Range(1, 1000).ToList();

            var prog = input.ToObservable().ToTemporalStreamable(
                o => (long)o,
                o => (long)o + 5,
<# switch (disorder)
        {
case "Drop": #>
                DisorderPolicy.Drop(<#= lag #>),
<#   break;
case "Throw": #>
                DisorderPolicy.Throw(<#= lag #>),
<#   break;
case "Adjust": #>
                DisorderPolicy.Adjust(<#= lag #>),
<# break;
default: #>
                null,
<#   break;
        } #>
                FlushPolicy.FlushOnPunctuation,
<# switch (punctuationpolicy)
        {
case "Time": #>
                PeriodicPunctuationPolicy.Time(10)<#
    break;
default: #>
                null<#
    break;
        } #>).ToStreamEventObservable();

            var outevents = prog.ToEnumerable().ToList();
            var output = outevents.Where(o => !o.IsPunctuation);
            var punctuations = outevents.Where(o => o.IsPunctuation && o.SyncTime != StreamEvent.InfinitySyncTime);
<#  if (punctuationpolicy == "Time")
    { #>
            Assert.IsTrue(punctuations.SequenceEqual(input.Where(i => i % 10 == 0).Select(i => StreamEvent.CreatePunctuation<int>((long)i))));
<#  } #>
            Assert.IsTrue(output.SequenceEqual(input.Select(i => StreamEvent.CreateInterval(i, i + 5, i))));
        }
    }
<# } #>
}
